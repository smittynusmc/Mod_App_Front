{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Mod_App_Front\\\\src\\\\components\\\\YouTubeComments.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst YouTubeComments = () => {\n  _s();\n\n  const [videoId, setVideoId] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const [accessToken, setAccessToken] = useState(\"\");\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get(\"access_token\");\n\n    if (token) {\n      setAccessToken(token); // Optionally, remove the access token from the URL\n\n      window.history.replaceState({}, document.title, \"/\");\n    }\n  }, []);\n\n  const handleAuth = () => {\n    window.location.href = \"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/auth/google\"; // Replace with your Cloud Run URL\n  };\n\n  const fetchComments = async () => {\n    try {\n      const response = await axios.post(\"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/youtube/comments\", {\n        // Replace with your Cloud Run URL\n        videoId,\n        accessToken\n      });\n      const commentsData = response.data.map(item => item.snippet.topLevelComment.snippet.textDisplay);\n      setComments(commentsData);\n    } catch (error) {\n      console.error(\"Error fetching comments\", error);\n    }\n  };\n\n  const selectWinner = () => {\n    if (comments.length === 0) return;\n    const winner = comments[Math.floor(Math.random() * comments.length)];\n    alert(`The winner is: ${winner}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !accessToken ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAuth,\n      children: \"Authenticate with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: videoId,\n        onChange: e => setVideoId(e.target.value),\n        placeholder: \"Enter YouTube Video ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchComments,\n        children: \"Fetch Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), comments.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: selectWinner,\n        children: \"Select Winner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(YouTubeComments, \"sfnNZJdVMz8qQq1H6+LBIgQVLhc=\");\n\n_c = YouTubeComments;\nexport default YouTubeComments;\n\nvar _c;\n\n$RefreshReg$(_c, \"YouTubeComments\");","map":{"version":3,"sources":["C:/Projects/Mod_App_Front/src/components/YouTubeComments.js"],"names":["React","useState","useEffect","axios","YouTubeComments","videoId","setVideoId","comments","setComments","accessToken","setAccessToken","urlParams","URLSearchParams","window","location","search","token","get","history","replaceState","document","title","handleAuth","href","fetchComments","response","post","commentsData","data","map","item","snippet","topLevelComment","textDisplay","error","console","selectWinner","length","winner","Math","floor","random","alert","e","target","value","comment","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst YouTubeComments = () => {\r\n  const [videoId, setVideoId] = useState(\"\");\r\n  const [comments, setComments] = useState([]);\r\n  const [accessToken, setAccessToken] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const token = urlParams.get(\"access_token\");\r\n    if (token) {\r\n      setAccessToken(token);\r\n      // Optionally, remove the access token from the URL\r\n      window.history.replaceState({}, document.title, \"/\");\r\n    }\r\n  }, []);\r\n\r\n  const handleAuth = () => {\r\n    window.location.href = \"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/auth/google\"; // Replace with your Cloud Run URL\r\n  };\r\n\r\n  const fetchComments = async () => {\r\n    try {\r\n      const response = await axios.post(\"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/youtube/comments\", { // Replace with your Cloud Run URL\r\n        videoId,\r\n        accessToken,\r\n      });\r\n      const commentsData = response.data.map(\r\n        (item) => item.snippet.topLevelComment.snippet.textDisplay\r\n      );\r\n      setComments(commentsData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching comments\", error);\r\n    }\r\n  };\r\n\r\n  const selectWinner = () => {\r\n    if (comments.length === 0) return;\r\n    const winner = comments[Math.floor(Math.random() * comments.length)];\r\n    alert(`The winner is: ${winner}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!accessToken ? (\r\n        <button onClick={handleAuth}>Authenticate with Google</button>\r\n      ) : (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            value={videoId}\r\n            onChange={(e) => setVideoId(e.target.value)}\r\n            placeholder=\"Enter YouTube Video ID\"\r\n          />\r\n          <button onClick={fetchComments}>Fetch Comments</button>\r\n          <div>\r\n            {comments.map((comment, index) => (\r\n              <p key={index}>{comment}</p>\r\n            ))}\r\n          </div>\r\n          {comments.length > 0 && (\r\n            <button onClick={selectWinner}>Select Winner</button>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YouTubeComments;\r\n"]},"metadata":{},"sourceType":"module"}