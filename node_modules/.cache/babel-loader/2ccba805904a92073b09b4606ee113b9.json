{"ast":null,"code":"import _asyncToGenerator from\"C:/Projects/Mod_App_Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Projects/Mod_App_Front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Projects\\\\Mod_App_Front\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import React,{useState,useEffect}from\"react\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var YouTubeComments=function YouTubeComments(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),videoId=_useState2[0],setVideoId=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),comments=_useState4[0],setComments=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),accessToken=_useState6[0],setAccessToken=_useState6[1];useEffect(function(){var urlParams=new URLSearchParams(window.location.search);var token=urlParams.get(\"access_token\");if(token){setAccessToken(token);// Optionally, remove the access token from the URL\nwindow.history.replaceState({},document.title,window.location.pathname);}},[]);var handleAuth=function handleAuth(){window.location.href=\"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/auth/google\";// Replace with your Cloud Run URL\n};var fetchComments=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,commentsData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.post(\"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/youtube/comments\",{// Replace with your Cloud Run URL\nvideoId:videoId,accessToken:accessToken});case 3:response=_context.sent;commentsData=response.data.map(function(item){return item.snippet.topLevelComment.snippet.textDisplay;});setComments(commentsData);_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);console.error(\"Error fetching comments\",_context.t0);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function fetchComments(){return _ref.apply(this,arguments);};}();var selectWinner=function selectWinner(){if(comments.length===0)return;var winner=comments[Math.floor(Math.random()*comments.length)];alert(\"The winner is: \".concat(winner));};return/*#__PURE__*/_jsx(\"div\",{children:!accessToken?/*#__PURE__*/_jsx(\"button\",{onClick:handleAuth,children:\"Authenticate with Google\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:videoId,onChange:function onChange(e){return setVideoId(e.target.value);},placeholder:\"Enter YouTube Video ID\"}),/*#__PURE__*/_jsx(\"button\",{onClick:fetchComments,children:\"Fetch Comments\"}),/*#__PURE__*/_jsx(\"div\",{children:comments.map(function(comment,index){return/*#__PURE__*/_jsx(\"p\",{children:comment},index);})}),comments.length>0&&/*#__PURE__*/_jsx(\"button\",{onClick:selectWinner,children:\"Select Winner\"})]})});};export default YouTubeComments;","map":{"version":3,"sources":["C:/Projects/Mod_App_Front/src/components/YouTubeComments.js"],"names":["React","useState","useEffect","axios","YouTubeComments","videoId","setVideoId","comments","setComments","accessToken","setAccessToken","urlParams","URLSearchParams","window","location","search","token","get","history","replaceState","document","title","pathname","handleAuth","href","fetchComments","post","response","commentsData","data","map","item","snippet","topLevelComment","textDisplay","console","error","selectWinner","length","winner","Math","floor","random","alert","e","target","value","comment","index"],"mappings":"uVAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,C,6IAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5B,cAA8BH,QAAQ,CAAC,EAAD,CAAtC,wCAAOI,OAAP,eAAgBC,UAAhB,eACA,eAAgCL,QAAQ,CAAC,EAAD,CAAxC,yCAAOM,QAAP,eAAiBC,WAAjB,eACA,eAAsCP,QAAQ,CAAC,EAAD,CAA9C,yCAAOQ,WAAP,eAAoBC,cAApB,eAEAR,SAAS,CAAC,UAAM,CACd,GAAMS,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAlB,CACA,GAAMC,CAAAA,KAAK,CAAGL,SAAS,CAACM,GAAV,CAAc,cAAd,CAAd,CACA,GAAID,KAAJ,CAAW,CACTN,cAAc,CAACM,KAAD,CAAd,CACA;AACAH,MAAM,CAACK,OAAP,CAAeC,YAAf,CAA4B,EAA5B,CAAgCC,QAAQ,CAACC,KAAzC,CAAgDR,MAAM,CAACC,QAAP,CAAgBQ,QAAhE,EACD,CACF,CARQ,CAQN,EARM,CAAT,CAUA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvBV,MAAM,CAACC,QAAP,CAAgBU,IAAhB,CAAuB,sEAAvB,CAA+F;AAChG,CAFD,CAIA,GAAMC,CAAAA,aAAa,0FAAG,mMAEKtB,CAAAA,KAAK,CAACuB,IAAN,CAAW,2EAAX,CAAwF,CAAE;AAC/GrB,OAAO,CAAPA,OAD6G,CAE7GI,WAAW,CAAXA,WAF6G,CAAxF,CAFL,QAEZkB,QAFY,eAMZC,YANY,CAMGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CACnB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,OAAL,CAAaC,eAAb,CAA6BD,OAA7B,CAAqCE,WAA/C,EADmB,CANH,CASlB1B,WAAW,CAACoB,YAAD,CAAX,CATkB,+EAWlBO,OAAO,CAACC,KAAR,CAAc,yBAAd,cAXkB,oEAAH,kBAAbX,CAAAA,aAAa,0CAAnB,CAeA,GAAMY,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,GAAI9B,QAAQ,CAAC+B,MAAT,GAAoB,CAAxB,CAA2B,OAC3B,GAAMC,CAAAA,MAAM,CAAGhC,QAAQ,CAACiC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBnC,QAAQ,CAAC+B,MAApC,CAAD,CAAvB,CACAK,KAAK,0BAAmBJ,MAAnB,EAAL,CACD,CAJD,CAMA,mBACE,qBACG,CAAC9B,WAAD,cACC,eAAQ,OAAO,CAAEc,UAAjB,sCADD,cAGC,wCACE,cACE,IAAI,CAAC,MADP,CAEE,KAAK,CAAElB,OAFT,CAGE,QAAQ,CAAE,kBAACuC,CAAD,QAAOtC,CAAAA,UAAU,CAACsC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB,EAHZ,CAIE,WAAW,CAAC,wBAJd,EADF,cAOE,eAAQ,OAAO,CAAErB,aAAjB,4BAPF,cAQE,qBACGlB,QAAQ,CAACuB,GAAT,CAAa,SAACiB,OAAD,CAAUC,KAAV,qBACZ,mBAAgBD,OAAhB,EAAQC,KAAR,CADY,EAAb,CADH,EARF,CAaGzC,QAAQ,CAAC+B,MAAT,CAAkB,CAAlB,eACC,eAAQ,OAAO,CAAED,YAAjB,2BAdJ,GAJJ,EADF,CAyBD,CAjED,CAmEA,cAAejC,CAAAA,eAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst YouTubeComments = () => {\r\n  const [videoId, setVideoId] = useState(\"\");\r\n  const [comments, setComments] = useState([]);\r\n  const [accessToken, setAccessToken] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const token = urlParams.get(\"access_token\");\r\n    if (token) {\r\n      setAccessToken(token);\r\n      // Optionally, remove the access token from the URL\r\n      window.history.replaceState({}, document.title, window.location.pathname);\r\n    }\r\n  }, []);\r\n\r\n  const handleAuth = () => {\r\n    window.location.href = \"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/auth/google\"; // Replace with your Cloud Run URL\r\n  };\r\n\r\n  const fetchComments = async () => {\r\n    try {\r\n      const response = await axios.post(\"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/youtube/comments\", { // Replace with your Cloud Run URL\r\n        videoId,\r\n        accessToken,\r\n      });\r\n      const commentsData = response.data.map(\r\n        (item) => item.snippet.topLevelComment.snippet.textDisplay\r\n      );\r\n      setComments(commentsData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching comments\", error);\r\n    }\r\n  };\r\n\r\n  const selectWinner = () => {\r\n    if (comments.length === 0) return;\r\n    const winner = comments[Math.floor(Math.random() * comments.length)];\r\n    alert(`The winner is: ${winner}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!accessToken ? (\r\n        <button onClick={handleAuth}>Authenticate with Google</button>\r\n      ) : (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            value={videoId}\r\n            onChange={(e) => setVideoId(e.target.value)}\r\n            placeholder=\"Enter YouTube Video ID\"\r\n          />\r\n          <button onClick={fetchComments}>Fetch Comments</button>\r\n          <div>\r\n            {comments.map((comment, index) => (\r\n              <p key={index}>{comment}</p>\r\n            ))}\r\n          </div>\r\n          {comments.length > 0 && (\r\n            <button onClick={selectWinner}>Select Winner</button>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YouTubeComments;\r\n"]},"metadata":{},"sourceType":"module"}