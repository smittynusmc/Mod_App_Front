{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect, visuallyHidden as visuallyHiddenStyle } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport { ListActionTypes, useList } from '../useList';\nimport { defaultOptionStringifier } from './defaultOptionStringifier';\nimport { useCompoundParent } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { selectReducer } from './selectReducer';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n\n    return JSON.stringify(selectedOption.map(function (o) {\n      return o.value;\n    }));\n  }\n\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n\n  return JSON.stringify(selectedOption.value);\n}\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\n\n\nfunction useSelect(props) {\n  var areOptionsEqual = props.areOptionsEqual,\n      buttonRefProp = props.buttonRef,\n      _props$defaultOpen = props.defaultOpen,\n      defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n      defaultValueProp = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      listboxIdProp = props.listboxId,\n      listboxRefProp = props.listboxRef,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      name = props.name,\n      required = props.required,\n      onChange = props.onChange,\n      onHighlightChange = props.onHighlightChange,\n      onOpenChange = props.onOpenChange,\n      openProp = props.open,\n      optionsParam = props.options,\n      _props$getOptionAsStr = props.getOptionAsString,\n      getOptionAsString = _props$getOptionAsStr === void 0 ? defaultOptionStringifier : _props$getOptionAsStr,\n      _props$getSerializedV = props.getSerializedValue,\n      getSerializedValue = _props$getSerializedV === void 0 ? defaultFormValueProvider : _props$getSerializedV,\n      valueProp = props.value,\n      _props$componentName = props.componentName,\n      componentName = _props$componentName === void 0 ? 'useSelect' : _props$componentName;\n  var buttonRef = React.useRef(null);\n  var handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  var listboxRef = React.useRef(null);\n  var listboxId = useId(listboxIdProp);\n  var defaultValue;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n\n  var value = React.useMemo(function () {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n\n      return valueProp == null ? [] : [valueProp];\n    }\n\n    return undefined;\n  }, [valueProp, multiple]);\n\n  var _useCompoundParent = useCompoundParent(),\n      subitems = _useCompoundParent.subitems,\n      compoundComponentContextValue = _useCompoundParent.contextValue;\n\n  var options = React.useMemo(function () {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map(function (option, index) {\n        return [option.value, {\n          value: option.value,\n          label: option.label,\n          disabled: option.disabled,\n          ref: /*#__PURE__*/React.createRef(),\n          id: \"\".concat(listboxId, \"_\").concat(index)\n        }];\n      }));\n    }\n\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  var handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n\n  var _useButton = useButton({\n    disabled: disabled,\n    rootRef: handleButtonRef\n  }),\n      getButtonRootProps = _useButton.getRootProps,\n      buttonActive = _useButton.active,\n      buttonFocusVisible = _useButton.focusVisible,\n      mergedButtonRef = _useButton.rootRef;\n\n  var optionValues = React.useMemo(function () {\n    return Array.from(options.keys());\n  }, [options]);\n  var getOptionByValue = React.useCallback(function (valueToGet) {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      var similarValue = optionValues.find(function (optionValue) {\n        return areOptionsEqual(optionValue, valueToGet);\n      });\n      return options.get(similarValue);\n    }\n\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  var isItemDisabled = React.useCallback(function (valueToCheck) {\n    var _option$disabled;\n\n    var option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  var stringifyOption = React.useCallback(function (valueToCheck) {\n    var option = getOptionByValue(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  var controlledState = React.useMemo(function () {\n    return {\n      selectedValues: value,\n      open: openProp\n    };\n  }, [value, openProp]);\n  var getItemId = React.useCallback(function (itemValue) {\n    var _options$get;\n\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  var handleSelectionChange = React.useCallback(function (event, newValues) {\n    if (multiple) {\n      onChange == null || onChange(event, newValues);\n    } else {\n      var _newValues$;\n\n      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  var handleHighlightChange = React.useCallback(function (event, newValue) {\n    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  var handleStateChange = React.useCallback(function (event, field, fieldValue) {\n    if (field === 'open') {\n      onOpenChange == null || onOpenChange(fieldValue);\n\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  var getItemDomElement = React.useCallback(function (itemId) {\n    var _subitems$get$ref$cur, _subitems$get;\n\n    if (itemId == null) {\n      return null;\n    }\n\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  var useListParameters = {\n    getInitialState: function getInitialState() {\n      var _defaultValue;\n\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId: getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement: getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled: isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(function () {\n      return {\n        multiple: multiple\n      };\n    }, [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer,\n    componentName: componentName\n  };\n\n  var _useList = useList(useListParameters),\n      dispatch = _useList.dispatch,\n      getListboxRootProps = _useList.getRootProps,\n      listContextValue = _useList.contextValue,\n      _useList$state = _useList.state,\n      open = _useList$state.open,\n      highlightedOption = _useList$state.highlightedValue,\n      selectedOptions = _useList$state.selectedValues,\n      mergedListRootRef = _useList.rootRef; // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n\n\n  var isInitiallyOpen = React.useRef(open);\n  useEnhancedEffect(function () {\n    if (open && highlightedOption !== null) {\n      var _getOptionByValue;\n\n      var optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n\n      var listboxClientRect = listboxRef.current.getBoundingClientRect();\n      var optionClientRect = optionRef.current.getBoundingClientRect();\n\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  var getOptionMetadata = React.useCallback(function (optionValue) {\n    return getOptionByValue(optionValue);\n  }, [getOptionByValue]);\n\n  var createHandleButtonClick = function createHandleButtonClick(externalEventHandlers) {\n    return function (event) {\n      var _externalEventHandler;\n\n      externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onClick) == null || _externalEventHandler.call(externalEventHandlers, event);\n\n      if (!event.defaultMuiPrevented) {\n        var action = {\n          type: SelectActionTypes.buttonClick,\n          event: event\n        };\n        dispatch(action);\n      }\n    };\n  };\n\n  var createHandleButtonKeyDown = function createHandleButtonKeyDown(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyD;\n\n      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        event.preventDefault();\n        dispatch({\n          type: ListActionTypes.keyDown,\n          key: event.key,\n          event: event\n        });\n      }\n    };\n  };\n\n  var getButtonOwnRootProps = function getButtonOwnRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onClick: createHandleButtonClick(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    };\n  };\n\n  var getSelectTriggerProps = function getSelectTriggerProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n\n  var getButtonProps = function getButtonProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var externalEventHandlers = extractEventHandlers(externalProps);\n    var combinedProps = combineHooksSlotProps(getSelectTriggerProps, getButtonRootProps);\n    return _extends({}, externalProps, combinedProps(externalEventHandlers));\n  };\n\n  var createListboxHandleBlur = function createListboxHandleBlur(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onBlur, _listboxRef$current;\n\n      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n\n      if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n        event.defaultMuiPrevented = true;\n      }\n    };\n  };\n\n  var getOwnListboxHandlers = function getOwnListboxHandlers() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onBlur: createListboxHandleBlur(otherHandlers)\n    };\n  };\n\n  var getListboxProps = function getListboxProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var externalEventHandlers = extractEventHandlers(externalProps);\n    var getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);\n    return _extends({\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    }, externalProps, getCombinedRootProps(externalEventHandlers));\n  };\n\n  React.useDebugValue({\n    selectedOptions: selectedOptions,\n    highlightedOption: highlightedOption,\n    open: open\n  });\n  var contextValue = React.useMemo(function () {\n    return _extends({}, listContextValue, compoundComponentContextValue);\n  }, [listContextValue, compoundComponentContextValue]);\n  var selectValue;\n\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n\n  var selectedOptionsMetadata;\n\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(function (v) {\n      return getOptionMetadata(v);\n    }).filter(function (o) {\n      return o !== undefined;\n    });\n  } else {\n    var _getOptionMetadata;\n\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;\n  }\n\n  var createHandleHiddenInputChange = function createHandleHiddenInputChange(externalEventHandlers) {\n    return function (event) {\n      var _externalEventHandler2;\n\n      externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);\n\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n\n      var option = options.get(event.target.value); // support autofill\n\n      if (event.target.value === '') {\n        dispatch({\n          type: ListActionTypes.clearSelection\n        });\n      } else if (option !== undefined) {\n        dispatch({\n          type: SelectActionTypes.browserAutoFill,\n          item: option.value,\n          event: event\n        });\n      }\n    };\n  };\n\n  var getHiddenInputProps = function getHiddenInputProps() {\n    var externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({\n      name: name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n\n  return {\n    buttonActive: buttonActive,\n    buttonFocusVisible: buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue: contextValue,\n    disabled: disabled,\n    dispatch: dispatch,\n    getButtonProps: getButtonProps,\n    getHiddenInputProps: getHiddenInputProps,\n    getListboxProps: getListboxProps,\n    getOptionMetadata: getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open: open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption: highlightedOption\n  };\n}\n\nexport { useSelect };","map":{"version":3,"sources":["C:/Projects/Mod_App_Front/node_modules/@mui/base/useSelect/useSelect.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","visuallyHidden","visuallyHiddenStyle","useButton","SelectActionTypes","ListActionTypes","useList","defaultOptionStringifier","useCompoundParent","extractEventHandlers","selectReducer","combineHooksSlotProps","defaultFormValueProvider","selectedOption","Array","isArray","length","JSON","stringify","map","o","value","useSelect","props","areOptionsEqual","buttonRefProp","buttonRef","defaultOpen","defaultValueProp","defaultValue","disabled","listboxIdProp","listboxId","listboxRefProp","listboxRef","multiple","name","required","onChange","onHighlightChange","onOpenChange","openProp","open","optionsParam","options","getOptionAsString","getSerializedValue","valueProp","componentName","useRef","handleButtonRef","undefined","useMemo","subitems","compoundComponentContextValue","contextValue","Map","option","index","label","ref","createRef","id","handleListboxRef","rootRef","getButtonRootProps","getRootProps","buttonActive","active","buttonFocusVisible","focusVisible","mergedButtonRef","optionValues","from","keys","getOptionByValue","useCallback","valueToGet","similarValue","find","optionValue","get","isItemDisabled","valueToCheck","_option$disabled","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","event","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","field","fieldValue","type","_buttonRef$current","current","focus","getItemDomElement","itemId","_subitems$get$ref$cur","_subitems$get","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","focusManagement","itemComparer","onStateChange","reducerActionContext","items","getItemAsString","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListRootRef","isInitiallyOpen","_getOptionByValue","optionRef","preventScroll","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getOptionMetadata","createHandleButtonClick","externalEventHandlers","_externalEventHandler","onClick","call","defaultMuiPrevented","action","buttonClick","createHandleButtonKeyDown","otherHandlers","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","keyDown","getButtonOwnRootProps","getSelectTriggerProps","role","getButtonProps","externalProps","combinedProps","createListboxHandleBlur","_otherHandlers$onBlur","_listboxRef$current","onBlur","contains","relatedTarget","getOwnListboxHandlers","getListboxProps","getCombinedRootProps","useDebugValue","selectValue","selectedOptionsMetadata","v","filter","_getOptionMetadata","createHandleHiddenInputChange","_externalEventHandler2","target","clearSelection","browserAutoFill","item","getHiddenInputProps","tabIndex","style"],"mappings":"AAAA;;AAEA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,EAA4CC,cAAc,IAAIC,KAA9D,EAAqEC,0BAA0B,IAAIC,iBAAnG,EAAsHC,cAAc,IAAIC,mBAAxI,QAAmK,YAAnK;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,eAAT,EAA0BC,OAA1B,QAAyC,YAAzC;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,SAASC,oBAAT,QAAqC,+BAArC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,qBAAT,QAAsC,gCAAtC;;AACA,SAASC,wBAAT,CAAkCC,cAAlC,EAAkD;AAChD,MAAIC,KAAK,CAACC,OAAN,CAAcF,cAAd,CAAJ,EAAmC;AACjC,QAAIA,cAAc,CAACG,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,aAAO,EAAP;AACD;;AACD,WAAOC,IAAI,CAACC,SAAL,CAAeL,cAAc,CAACM,GAAf,CAAmB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,KAAN;AAAA,KAApB,CAAf,CAAP;AACD;;AACD,MAAI,CAACR,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAACQ,KAAlD,KAA4D,IAAhE,EAAsE;AACpE,WAAO,EAAP;AACD;;AACD,MAAI,OAAOR,cAAc,CAACQ,KAAtB,KAAgC,QAAhC,IAA4C,OAAOR,cAAc,CAACQ,KAAtB,KAAgC,QAAhF,EAA0F;AACxF,WAAOR,cAAc,CAACQ,KAAtB;AACD;;AACD,SAAOJ,IAAI,CAACC,SAAL,CAAeL,cAAc,CAACQ,KAA9B,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MACEC,eADF,GAoBID,KApBJ,CACEC,eADF;AAAA,MAEaC,aAFb,GAoBIF,KApBJ,CAEEG,SAFF;AAAA,2BAoBIH,KApBJ,CAGEI,WAHF;AAAA,MAGEA,WAHF,mCAGgB,KAHhB;AAAA,MAIgBC,gBAJhB,GAoBIL,KApBJ,CAIEM,YAJF;AAAA,wBAoBIN,KApBJ,CAKEO,QALF;AAAA,MAKEA,QALF,gCAKa,KALb;AAAA,MAMaC,aANb,GAoBIR,KApBJ,CAMES,SANF;AAAA,MAOcC,cAPd,GAoBIV,KApBJ,CAOEW,UAPF;AAAA,wBAoBIX,KApBJ,CAQEY,QARF;AAAA,MAQEA,QARF,gCAQa,KARb;AAAA,MASEC,IATF,GAoBIb,KApBJ,CASEa,IATF;AAAA,MAUEC,QAVF,GAoBId,KApBJ,CAUEc,QAVF;AAAA,MAWEC,QAXF,GAoBIf,KApBJ,CAWEe,QAXF;AAAA,MAYEC,iBAZF,GAoBIhB,KApBJ,CAYEgB,iBAZF;AAAA,MAaEC,YAbF,GAoBIjB,KApBJ,CAaEiB,YAbF;AAAA,MAcQC,QAdR,GAoBIlB,KApBJ,CAcEmB,IAdF;AAAA,MAeWC,YAfX,GAoBIpB,KApBJ,CAeEqB,OAfF;AAAA,8BAoBIrB,KApBJ,CAgBEsB,iBAhBF;AAAA,MAgBEA,iBAhBF,sCAgBsBtC,wBAhBtB;AAAA,8BAoBIgB,KApBJ,CAiBEuB,kBAjBF;AAAA,MAiBEA,kBAjBF,sCAiBuBlC,wBAjBvB;AAAA,MAkBSmC,SAlBT,GAoBIxB,KApBJ,CAkBEF,KAlBF;AAAA,6BAoBIE,KApBJ,CAmBEyB,aAnBF;AAAA,MAmBEA,aAnBF,qCAmBkB,WAnBlB;AAqBA,MAAMtB,SAAS,GAAGhC,KAAK,CAACuD,MAAN,CAAa,IAAb,CAAlB;AACA,MAAMC,eAAe,GAAGtD,UAAU,CAAC6B,aAAD,EAAgBC,SAAhB,CAAlC;AACA,MAAMQ,UAAU,GAAGxC,KAAK,CAACuD,MAAN,CAAa,IAAb,CAAnB;AACA,MAAMjB,SAAS,GAAGlC,KAAK,CAACiC,aAAD,CAAvB;AACA,MAAIF,YAAJ;;AACA,MAAIkB,SAAS,KAAKI,SAAd,IAA2BvB,gBAAgB,KAAKuB,SAApD,EAA+D;AAC7DtB,IAAAA,YAAY,GAAG,EAAf;AACD,GAFD,MAEO,IAAID,gBAAgB,KAAKuB,SAAzB,EAAoC;AACzC,QAAIhB,QAAJ,EAAc;AACZN,MAAAA,YAAY,GAAGD,gBAAf;AACD,KAFD,MAEO;AACLC,MAAAA,YAAY,GAAGD,gBAAgB,IAAI,IAApB,GAA2B,EAA3B,GAAgC,CAACA,gBAAD,CAA/C;AACD;AACF;;AACD,MAAMP,KAAK,GAAG3B,KAAK,CAAC0D,OAAN,CAAc,YAAM;AAChC,QAAIL,SAAS,KAAKI,SAAlB,EAA6B;AAC3B,UAAIhB,QAAJ,EAAc;AACZ,eAAOY,SAAP;AACD;;AACD,aAAOA,SAAS,IAAI,IAAb,GAAoB,EAApB,GAAyB,CAACA,SAAD,CAAhC;AACD;;AACD,WAAOI,SAAP;AACD,GARa,EAQX,CAACJ,SAAD,EAAYZ,QAAZ,CARW,CAAd;;AASA,2BAGI3B,iBAAiB,EAHrB;AAAA,MACE6C,QADF,sBACEA,QADF;AAAA,MAEgBC,6BAFhB,sBAEEC,YAFF;;AAIA,MAAMX,OAAO,GAAGlD,KAAK,CAAC0D,OAAN,CAAc,YAAM;AAClC,QAAIT,YAAY,IAAI,IAApB,EAA0B;AACxB,aAAO,IAAIa,GAAJ,CAAQb,YAAY,CAACxB,GAAb,CAAiB,UAACsC,MAAD,EAASC,KAAT;AAAA,eAAmB,CAACD,MAAM,CAACpC,KAAR,EAAe;AAChEA,UAAAA,KAAK,EAAEoC,MAAM,CAACpC,KADkD;AAEhEsC,UAAAA,KAAK,EAAEF,MAAM,CAACE,KAFkD;AAGhE7B,UAAAA,QAAQ,EAAE2B,MAAM,CAAC3B,QAH+C;AAIhE8B,UAAAA,GAAG,EAAE,aAAalE,KAAK,CAACmE,SAAN,EAJ8C;AAKhEC,UAAAA,EAAE,YAAK9B,SAAL,cAAkB0B,KAAlB;AAL8D,SAAf,CAAnB;AAAA,OAAjB,CAAR,CAAP;AAOD;;AACD,WAAOL,QAAP;AACD,GAXe,EAWb,CAACV,YAAD,EAAeU,QAAf,EAAyBrB,SAAzB,CAXa,CAAhB;AAYA,MAAM+B,gBAAgB,GAAGnE,UAAU,CAACqC,cAAD,EAAiBC,UAAjB,CAAnC;;AACA,mBAKI/B,SAAS,CAAC;AACZ2B,IAAAA,QAAQ,EAARA,QADY;AAEZkC,IAAAA,OAAO,EAAEd;AAFG,GAAD,CALb;AAAA,MACgBe,kBADhB,cACEC,YADF;AAAA,MAEUC,YAFV,cAEEC,MAFF;AAAA,MAGgBC,kBAHhB,cAGEC,YAHF;AAAA,MAIWC,eAJX,cAIEP,OAJF;;AASA,MAAMQ,YAAY,GAAG9E,KAAK,CAAC0D,OAAN,CAAc;AAAA,WAAMtC,KAAK,CAAC2D,IAAN,CAAW7B,OAAO,CAAC8B,IAAR,EAAX,CAAN;AAAA,GAAd,EAAgD,CAAC9B,OAAD,CAAhD,CAArB;AACA,MAAM+B,gBAAgB,GAAGjF,KAAK,CAACkF,WAAN,CAAkB,UAAAC,UAAU,EAAI;AACvD;AACA;AACA,QAAIrD,eAAe,KAAK2B,SAAxB,EAAmC;AACjC,UAAM2B,YAAY,GAAGN,YAAY,CAACO,IAAb,CAAkB,UAAAC,WAAW;AAAA,eAAIxD,eAAe,CAACwD,WAAD,EAAcH,UAAd,CAAnB;AAAA,OAA7B,CAArB;AACA,aAAOjC,OAAO,CAACqC,GAAR,CAAYH,YAAZ,CAAP;AACD;;AACD,WAAOlC,OAAO,CAACqC,GAAR,CAAYJ,UAAZ,CAAP;AACD,GARwB,EAQtB,CAACjC,OAAD,EAAUpB,eAAV,EAA2BgD,YAA3B,CARsB,CAAzB;AASA,MAAMU,cAAc,GAAGxF,KAAK,CAACkF,WAAN,CAAkB,UAAAO,YAAY,EAAI;AACvD,QAAIC,gBAAJ;;AACA,QAAM3B,MAAM,GAAGkB,gBAAgB,CAACQ,YAAD,CAA/B;AACA,WAAO,CAACC,gBAAgB,GAAG3B,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAAC3B,QAArD,KAAkE,IAAlE,GAAyEsD,gBAAzE,GAA4F,KAAnG;AACD,GAJsB,EAIpB,CAACT,gBAAD,CAJoB,CAAvB;AAKA,MAAMU,eAAe,GAAG3F,KAAK,CAACkF,WAAN,CAAkB,UAAAO,YAAY,EAAI;AACxD,QAAM1B,MAAM,GAAGkB,gBAAgB,CAACQ,YAAD,CAA/B;;AACA,QAAI,CAAC1B,MAAL,EAAa;AACX,aAAO,EAAP;AACD;;AACD,WAAOZ,iBAAiB,CAACY,MAAD,CAAxB;AACD,GANuB,EAMrB,CAACkB,gBAAD,EAAmB9B,iBAAnB,CANqB,CAAxB;AAOA,MAAMyC,eAAe,GAAG5F,KAAK,CAAC0D,OAAN,CAAc;AAAA,WAAO;AAC3CmC,MAAAA,cAAc,EAAElE,KAD2B;AAE3CqB,MAAAA,IAAI,EAAED;AAFqC,KAAP;AAAA,GAAd,EAGpB,CAACpB,KAAD,EAAQoB,QAAR,CAHoB,CAAxB;AAIA,MAAM+C,SAAS,GAAG9F,KAAK,CAACkF,WAAN,CAAkB,UAAAa,SAAS,EAAI;AAC/C,QAAIC,YAAJ;;AACA,WAAO,CAACA,YAAY,GAAG9C,OAAO,CAACqC,GAAR,CAAYQ,SAAZ,CAAhB,KAA2C,IAA3C,GAAkD,KAAK,CAAvD,GAA2DC,YAAY,CAAC5B,EAA/E;AACD,GAHiB,EAGf,CAAClB,OAAD,CAHe,CAAlB;AAIA,MAAM+C,qBAAqB,GAAGjG,KAAK,CAACkF,WAAN,CAAkB,UAACgB,KAAD,EAAQC,SAAR,EAAsB;AACpE,QAAI1D,QAAJ,EAAc;AACZG,MAAAA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACsD,KAAD,EAAQC,SAAR,CAA5B;AACD,KAFD,MAEO;AACL,UAAIC,WAAJ;;AACAxD,MAAAA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACsD,KAAD,EAAQ,CAACE,WAAW,GAAGD,SAAS,CAAC,CAAD,CAAxB,KAAgC,IAAhC,GAAuCC,WAAvC,GAAqD,IAA7D,CAA5B;AACD;AACF,GAP6B,EAO3B,CAAC3D,QAAD,EAAWG,QAAX,CAP2B,CAA9B;AAQA,MAAMyD,qBAAqB,GAAGrG,KAAK,CAACkF,WAAN,CAAkB,UAACgB,KAAD,EAAQI,QAAR,EAAqB;AACnEzD,IAAAA,iBAAiB,IAAI,IAArB,IAA6BA,iBAAiB,CAACqD,KAAD,EAAQI,QAAQ,IAAI,IAAZ,GAAmBA,QAAnB,GAA8B,IAAtC,CAA9C;AACD,GAF6B,EAE3B,CAACzD,iBAAD,CAF2B,CAA9B;AAGA,MAAM0D,iBAAiB,GAAGvG,KAAK,CAACkF,WAAN,CAAkB,UAACgB,KAAD,EAAQM,KAAR,EAAeC,UAAf,EAA8B;AACxE,QAAID,KAAK,KAAK,MAAd,EAAsB;AACpB1D,MAAAA,YAAY,IAAI,IAAhB,IAAwBA,YAAY,CAAC2D,UAAD,CAApC;;AACA,UAAIA,UAAU,KAAK,KAAf,IAAwB,CAACP,KAAK,IAAI,IAAT,GAAgB,KAAK,CAArB,GAAyBA,KAAK,CAACQ,IAAhC,MAA0C,MAAtE,EAA8E;AAC5E,YAAIC,kBAAJ;;AACA,SAACA,kBAAkB,GAAG3E,SAAS,CAAC4E,OAAhC,KAA4C,IAA5C,IAAoDD,kBAAkB,CAACE,KAAnB,EAApD;AACD;AACF;AACF,GARyB,EAQvB,CAAC/D,YAAD,CARuB,CAA1B;AASA,MAAMgE,iBAAiB,GAAG9G,KAAK,CAACkF,WAAN,CAAkB,UAAA6B,MAAM,EAAI;AACpD,QAAIC,qBAAJ,EAA2BC,aAA3B;;AACA,QAAIF,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,CAACC,qBAAqB,GAAG,CAACC,aAAa,GAAGtD,QAAQ,CAAC4B,GAAT,CAAawB,MAAb,CAAjB,KAA0C,IAA1C,GAAiD,KAAK,CAAtD,GAA0DE,aAAa,CAAC/C,GAAd,CAAkB0C,OAArG,KAAiH,IAAjH,GAAwHI,qBAAxH,GAAgJ,IAAvJ;AACD,GANyB,EAMvB,CAACrD,QAAD,CANuB,CAA1B;AAOA,MAAMuD,iBAAiB,GAAG;AACxBC,IAAAA,eAAe,EAAE,2BAAM;AACrB,UAAIC,aAAJ;;AACA,aAAO;AACLC,QAAAA,gBAAgB,EAAE,IADb;AAELxB,QAAAA,cAAc,EAAE,CAACuB,aAAa,GAAGjF,YAAjB,KAAkC,IAAlC,GAAyCiF,aAAzC,GAAyD,EAFpE;AAGLpE,QAAAA,IAAI,EAAEf;AAHD,OAAP;AAKD,KARuB;AASxB6D,IAAAA,SAAS,EAATA,SATwB;AAUxBwB,IAAAA,eAAe,EAAE1B,eAVO;AAWxB2B,IAAAA,eAAe,EAAE,KAXO;AAYxBT,IAAAA,iBAAiB,EAAjBA,iBAZwB;AAaxBU,IAAAA,YAAY,EAAE1F,eAbU;AAcxB0D,IAAAA,cAAc,EAAdA,cAdwB;AAexBlB,IAAAA,OAAO,EAAED,gBAfe;AAgBxBzB,IAAAA,QAAQ,EAAEqD,qBAhBc;AAiBxBpD,IAAAA,iBAAiB,EAAEwD,qBAjBK;AAkBxBoB,IAAAA,aAAa,EAAElB,iBAlBS;AAmBxBmB,IAAAA,oBAAoB,EAAE1H,KAAK,CAAC0D,OAAN,CAAc;AAAA,aAAO;AACzCjB,QAAAA,QAAQ,EAARA;AADyC,OAAP;AAAA,KAAd,EAElB,CAACA,QAAD,CAFkB,CAnBE;AAsBxBkF,IAAAA,KAAK,EAAE7C,YAtBiB;AAuBxB8C,IAAAA,eAAe,EAAEjC,eAvBO;AAwBxBkC,IAAAA,aAAa,EAAEpF,QAAQ,GAAG,UAAH,GAAgB,QAxBf;AAyBxBqF,IAAAA,YAAY,EAAE9G,aAzBU;AA0BxBsC,IAAAA,aAAa,EAAbA;AA1BwB,GAA1B;;AA4BA,iBAUI1C,OAAO,CAACsG,iBAAD,CAVX;AAAA,MACEa,QADF,YACEA,QADF;AAAA,MAEgBC,mBAFhB,YAEExD,YAFF;AAAA,MAGgByD,gBAHhB,YAGEpE,YAHF;AAAA,gCAIEqE,KAJF;AAAA,MAKIlF,IALJ,kBAKIA,IALJ;AAAA,MAMsBmF,iBANtB,kBAMId,gBANJ;AAAA,MAOoBe,eAPpB,kBAOIvC,cAPJ;AAAA,MASWwC,iBATX,YASE/D,OATF,CA5JwB,CAwKxB;AACA;;;AACA,MAAMgE,eAAe,GAAGtI,KAAK,CAACuD,MAAN,CAAaP,IAAb,CAAxB;AACA1C,EAAAA,iBAAiB,CAAC,YAAM;AACtB,QAAI0C,IAAI,IAAImF,iBAAiB,KAAK,IAAlC,EAAwC;AACtC,UAAII,iBAAJ;;AACA,UAAMC,SAAS,GAAG,CAACD,iBAAiB,GAAGtD,gBAAgB,CAACkD,iBAAD,CAArC,KAA6D,IAA7D,GAAoE,KAAK,CAAzE,GAA6EI,iBAAiB,CAACrE,GAAjH;;AACA,UAAI,CAAC1B,UAAU,CAACoE,OAAZ,IAAuB,EAAE4B,SAAS,IAAI,IAAb,IAAqBA,SAAS,CAAC5B,OAAjC,CAA3B,EAAsE;AACpE;AACD;;AACD,UAAI,CAAC0B,eAAe,CAAC1B,OAArB,EAA8B;AAC5B4B,QAAAA,SAAS,CAAC5B,OAAV,CAAkBC,KAAlB,CAAwB;AACtB4B,UAAAA,aAAa,EAAE;AADO,SAAxB;AAGD;;AACD,UAAMC,iBAAiB,GAAGlG,UAAU,CAACoE,OAAX,CAAmB+B,qBAAnB,EAA1B;AACA,UAAMC,gBAAgB,GAAGJ,SAAS,CAAC5B,OAAV,CAAkB+B,qBAAlB,EAAzB;;AACA,UAAIC,gBAAgB,CAACC,GAAjB,GAAuBH,iBAAiB,CAACG,GAA7C,EAAkD;AAChDrG,QAAAA,UAAU,CAACoE,OAAX,CAAmBkC,SAAnB,IAAgCJ,iBAAiB,CAACG,GAAlB,GAAwBD,gBAAgB,CAACC,GAAzE;AACD,OAFD,MAEO,IAAID,gBAAgB,CAACG,MAAjB,GAA0BL,iBAAiB,CAACK,MAAhD,EAAwD;AAC7DvG,QAAAA,UAAU,CAACoE,OAAX,CAAmBkC,SAAnB,IAAgCF,gBAAgB,CAACG,MAAjB,GAA0BL,iBAAiB,CAACK,MAA5E;AACD;AACF;AACF,GApBgB,EAoBd,CAAC/F,IAAD,EAAOmF,iBAAP,EAA0BlD,gBAA1B,CApBc,CAAjB;AAqBA,MAAM+D,iBAAiB,GAAGhJ,KAAK,CAACkF,WAAN,CAAkB,UAAAI,WAAW;AAAA,WAAIL,gBAAgB,CAACK,WAAD,CAApB;AAAA,GAA7B,EAAgE,CAACL,gBAAD,CAAhE,CAA1B;;AACA,MAAMgE,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,qBAAqB;AAAA,WAAI,UAAAhD,KAAK,EAAI;AAChE,UAAIiD,qBAAJ;;AACAD,MAAAA,qBAAqB,IAAI,IAAzB,IAAiC,CAACC,qBAAqB,GAAGD,qBAAqB,CAACE,OAA/C,KAA2D,IAA5F,IAAoGD,qBAAqB,CAACE,IAAtB,CAA2BH,qBAA3B,EAAkDhD,KAAlD,CAApG;;AACA,UAAI,CAACA,KAAK,CAACoD,mBAAX,EAAgC;AAC9B,YAAMC,MAAM,GAAG;AACb7C,UAAAA,IAAI,EAAEhG,iBAAiB,CAAC8I,WADX;AAEbtD,UAAAA,KAAK,EAALA;AAFa,SAAf;AAIA6B,QAAAA,QAAQ,CAACwB,MAAD,CAAR;AACD;AACF,KAVoD;AAAA,GAArD;;AAWA,MAAME,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAC,aAAa;AAAA,WAAI,UAAAxD,KAAK,EAAI;AAC1D,UAAIyD,qBAAJ;;AACA,OAACA,qBAAqB,GAAGD,aAAa,CAACE,SAAvC,KAAqD,IAArD,IAA6DD,qBAAqB,CAACN,IAAtB,CAA2BK,aAA3B,EAA0CxD,KAA1C,CAA7D;;AACA,UAAIA,KAAK,CAACoD,mBAAV,EAA+B;AAC7B;AACD;;AACD,UAAIpD,KAAK,CAAC2D,GAAN,KAAc,WAAd,IAA6B3D,KAAK,CAAC2D,GAAN,KAAc,SAA/C,EAA0D;AACxD3D,QAAAA,KAAK,CAAC4D,cAAN;AACA/B,QAAAA,QAAQ,CAAC;AACPrB,UAAAA,IAAI,EAAE/F,eAAe,CAACoJ,OADf;AAEPF,UAAAA,GAAG,EAAE3D,KAAK,CAAC2D,GAFJ;AAGP3D,UAAAA,KAAK,EAALA;AAHO,SAAD,CAAR;AAKD;AACF,KAd8C;AAAA,GAA/C;;AAeA,MAAM8D,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,QAACN,aAAD,uEAAiB,EAAjB;AAAA,WAAyB;AACrDN,MAAAA,OAAO,EAAEH,uBAAuB,CAACS,aAAD,CADqB;AAErDE,MAAAA,SAAS,EAAEH,yBAAyB,CAACC,aAAD;AAFiB,KAAzB;AAAA,GAA9B;;AAIA,MAAMO,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAwB;AAAA,QAAvBP,aAAuB,uEAAP,EAAO;AACpD,WAAO3J,QAAQ,CAAC,EAAD,EAAK2J,aAAL,EAAoBM,qBAAqB,CAACN,aAAD,CAAzC,EAA0D;AACvEQ,MAAAA,IAAI,EAAE,UADiE;AAEvE,uBAAiBlH,IAFsD;AAGvE,uBAAiBV;AAHsD,KAA1D,CAAf;AAKD,GAND;;AAOA,MAAM6H,cAAc,GAAG,SAAjBA,cAAiB,GAAwB;AAAA,QAAvBC,aAAuB,uEAAP,EAAO;AAC7C,QAAMlB,qBAAqB,GAAGnI,oBAAoB,CAACqJ,aAAD,CAAlD;AACA,QAAMC,aAAa,GAAGpJ,qBAAqB,CAACgJ,qBAAD,EAAwB1F,kBAAxB,CAA3C;AACA,WAAOxE,QAAQ,CAAC,EAAD,EAAKqK,aAAL,EAAoBC,aAAa,CAACnB,qBAAD,CAAjC,CAAf;AACD,GAJD;;AAKA,MAAMoB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAZ,aAAa;AAAA,WAAI,UAAAxD,KAAK,EAAI;AACxD,UAAIqE,qBAAJ,EAA2BC,mBAA3B;;AACA,OAACD,qBAAqB,GAAGb,aAAa,CAACe,MAAvC,KAAkD,IAAlD,IAA0DF,qBAAqB,CAAClB,IAAtB,CAA2BK,aAA3B,EAA0CxD,KAA1C,CAA1D;;AACA,UAAIA,KAAK,CAACoD,mBAAV,EAA+B;AAC7B;AACD;;AACD,UAAI,CAACkB,mBAAmB,GAAGhI,UAAU,CAACoE,OAAlC,KAA8C,IAA9C,IAAsD4D,mBAAmB,CAACE,QAApB,CAA6BxE,KAAK,CAACyE,aAAnC,CAAtD,IAA2GzE,KAAK,CAACyE,aAAN,KAAwB3I,SAAS,CAAC4E,OAAjJ,EAA0J;AACxJV,QAAAA,KAAK,CAACoD,mBAAN,GAA4B,IAA5B;AACD;AACF,KAT4C;AAAA,GAA7C;;AAUA,MAAMsB,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,QAAClB,aAAD,uEAAiB,EAAjB;AAAA,WAAyB;AACrDe,MAAAA,MAAM,EAAEH,uBAAuB,CAACZ,aAAD;AADsB,KAAzB;AAAA,GAA9B;;AAGA,MAAMmB,eAAe,GAAG,SAAlBA,eAAkB,GAAwB;AAAA,QAAvBT,aAAuB,uEAAP,EAAO;AAC9C,QAAMlB,qBAAqB,GAAGnI,oBAAoB,CAACqJ,aAAD,CAAlD;AACA,QAAMU,oBAAoB,GAAG7J,qBAAqB,CAAC2J,qBAAD,EAAwB5C,mBAAxB,CAAlD;AACA,WAAOjI,QAAQ,CAAC;AACdqE,MAAAA,EAAE,EAAE9B,SADU;AAEd4H,MAAAA,IAAI,EAAE,SAFQ;AAGd,8BAAwBzH,QAAQ,GAAG,MAAH,GAAYgB;AAH9B,KAAD,EAIZ2G,aAJY,EAIGU,oBAAoB,CAAC5B,qBAAD,CAJvB,CAAf;AAKD,GARD;;AASAlJ,EAAAA,KAAK,CAAC+K,aAAN,CAAoB;AAClB3C,IAAAA,eAAe,EAAfA,eADkB;AAElBD,IAAAA,iBAAiB,EAAjBA,iBAFkB;AAGlBnF,IAAAA,IAAI,EAAJA;AAHkB,GAApB;AAKA,MAAMa,YAAY,GAAG7D,KAAK,CAAC0D,OAAN,CAAc;AAAA,WAAM3D,QAAQ,CAAC,EAAD,EAAKkI,gBAAL,EAAuBrE,6BAAvB,CAAd;AAAA,GAAd,EAAmF,CAACqE,gBAAD,EAAmBrE,6BAAnB,CAAnF,CAArB;AACA,MAAIoH,WAAJ;;AACA,MAAInJ,KAAK,CAACY,QAAV,EAAoB;AAClBuI,IAAAA,WAAW,GAAG5C,eAAd;AACD,GAFD,MAEO;AACL4C,IAAAA,WAAW,GAAG5C,eAAe,CAAC9G,MAAhB,GAAyB,CAAzB,GAA6B8G,eAAe,CAAC,CAAD,CAA5C,GAAkD,IAAhE;AACD;;AACD,MAAI6C,uBAAJ;;AACA,MAAIxI,QAAJ,EAAc;AACZwI,IAAAA,uBAAuB,GAAGD,WAAW,CAACvJ,GAAZ,CAAgB,UAAAyJ,CAAC;AAAA,aAAIlC,iBAAiB,CAACkC,CAAD,CAArB;AAAA,KAAjB,EAA2CC,MAA3C,CAAkD,UAAAzJ,CAAC;AAAA,aAAIA,CAAC,KAAK+B,SAAV;AAAA,KAAnD,CAA1B;AACD,GAFD,MAEO;AACL,QAAI2H,kBAAJ;;AACAH,IAAAA,uBAAuB,GAAG,CAACG,kBAAkB,GAAGpC,iBAAiB,CAACgC,WAAD,CAAvC,KAAyD,IAAzD,GAAgEI,kBAAhE,GAAqF,IAA/G;AACD;;AACD,MAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAAnC,qBAAqB;AAAA,WAAI,UAAAhD,KAAK,EAAI;AACtE,UAAIoF,sBAAJ;;AACApC,MAAAA,qBAAqB,IAAI,IAAzB,IAAiC,CAACoC,sBAAsB,GAAGpC,qBAAqB,CAACtG,QAAhD,KAA6D,IAA9F,IAAsG0I,sBAAsB,CAACjC,IAAvB,CAA4BH,qBAA5B,EAAmDhD,KAAnD,CAAtG;;AACA,UAAIA,KAAK,CAACoD,mBAAV,EAA+B;AAC7B;AACD;;AACD,UAAMvF,MAAM,GAAGb,OAAO,CAACqC,GAAR,CAAYW,KAAK,CAACqF,MAAN,CAAa5J,KAAzB,CAAf,CANsE,CAQtE;;AACA,UAAIuE,KAAK,CAACqF,MAAN,CAAa5J,KAAb,KAAuB,EAA3B,EAA+B;AAC7BoG,QAAAA,QAAQ,CAAC;AACPrB,UAAAA,IAAI,EAAE/F,eAAe,CAAC6K;AADf,SAAD,CAAR;AAGD,OAJD,MAIO,IAAIzH,MAAM,KAAKN,SAAf,EAA0B;AAC/BsE,QAAAA,QAAQ,CAAC;AACPrB,UAAAA,IAAI,EAAEhG,iBAAiB,CAAC+K,eADjB;AAEPC,UAAAA,IAAI,EAAE3H,MAAM,CAACpC,KAFN;AAGPuE,UAAAA,KAAK,EAALA;AAHO,SAAD,CAAR;AAKD;AACF,KApB0D;AAAA,GAA3D;;AAqBA,MAAMyF,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAwB;AAAA,QAAvBvB,aAAuB,uEAAP,EAAO;AAClD,QAAMlB,qBAAqB,GAAGnI,oBAAoB,CAACqJ,aAAD,CAAlD;AACA,WAAOrK,QAAQ,CAAC;AACd2C,MAAAA,IAAI,EAAJA,IADc;AAEdkJ,MAAAA,QAAQ,EAAE,CAAC,CAFG;AAGd,qBAAe,IAHD;AAIdjJ,MAAAA,QAAQ,EAAEA,QAAQ,GAAG,IAAH,GAAUc,SAJd;AAKd9B,MAAAA,KAAK,EAAEyB,kBAAkB,CAAC6H,uBAAD,CALX;AAMdY,MAAAA,KAAK,EAAErL;AANO,KAAD,EAOZ4J,aAPY,EAOG;AAChBxH,MAAAA,QAAQ,EAAEyI,6BAA6B,CAACnC,qBAAD;AADvB,KAPH,CAAf;AAUD,GAZD;;AAaA,SAAO;AACLzE,IAAAA,YAAY,EAAZA,YADK;AAELE,IAAAA,kBAAkB,EAAlBA,kBAFK;AAGL3C,IAAAA,SAAS,EAAE6C,eAHN;AAILhB,IAAAA,YAAY,EAAZA,YAJK;AAKLzB,IAAAA,QAAQ,EAARA,QALK;AAML2F,IAAAA,QAAQ,EAARA,QANK;AAOLoC,IAAAA,cAAc,EAAdA,cAPK;AAQLwB,IAAAA,mBAAmB,EAAnBA,mBARK;AASLd,IAAAA,eAAe,EAAfA,eATK;AAUL7B,IAAAA,iBAAiB,EAAjBA,iBAVK;AAWLxG,IAAAA,UAAU,EAAE6F,iBAXP;AAYLrF,IAAAA,IAAI,EAAJA,IAZK;AAaLE,IAAAA,OAAO,EAAE4B,YAbJ;AAcLnD,IAAAA,KAAK,EAAEqJ,WAdF;AAeL7C,IAAAA,iBAAiB,EAAjBA;AAfK,GAAP;AAiBD;;AACD,SAASvG,SAAT","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect, visuallyHidden as visuallyHiddenStyle } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport { ListActionTypes, useList } from '../useList';\nimport { defaultOptionStringifier } from './defaultOptionStringifier';\nimport { useCompoundParent } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { selectReducer } from './selectReducer';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp,\n    componentName = 'useSelect'\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null || onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null || onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const getItemDomElement = React.useCallback(itemId => {\n    var _subitems$get$ref$cur, _subitems$get;\n    if (itemId == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer,\n    componentName\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n\n  // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n  const isInitiallyOpen = React.useRef(open);\n  useEnhancedEffect(() => {\n    if (open && highlightedOption !== null) {\n      var _getOptionByValue;\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n  const createHandleButtonClick = externalEventHandlers => event => {\n    var _externalEventHandler;\n    externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onClick) == null || _externalEventHandler.call(externalEventHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n  const getButtonOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleButtonClick(otherHandlers),\n    onKeyDown: createHandleButtonKeyDown(otherHandlers)\n  });\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const combinedProps = combineHooksSlotProps(getSelectTriggerProps, getButtonRootProps);\n    return _extends({}, externalProps, combinedProps(externalEventHandlers));\n  };\n  const createListboxHandleBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur, _listboxRef$current;\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createListboxHandleBlur(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);\n    return _extends({\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    }, externalProps, getCombinedRootProps(externalEventHandlers));\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    var _getOptionMetadata;\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;\n  }\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\n    var _externalEventHandler2;\n    externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const option = options.get(event.target.value);\n\n    // support autofill\n    if (event.target.value === '') {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== undefined) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({\n      name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport { useSelect };"]},"metadata":{},"sourceType":"module"}