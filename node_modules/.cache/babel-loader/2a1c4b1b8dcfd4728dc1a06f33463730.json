{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\n\nvar styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\n\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflowing;\n}\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/base-ui/react-textarea-autosize/)\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/base-ui/react-textarea-autosize/components-api/#textarea-autosize)\n */\n\n\nvar TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  var onChange = props.onChange,\n      maxRows = props.maxRows,\n      _props$minRows = props.minRows,\n      minRows = _props$minRows === void 0 ? 1 : _props$minRows,\n      style = props.style,\n      value = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _React$useRef = React.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(forwardedRef, inputRef);\n  var shadowRef = React.useRef(null);\n  var calculateTextareaStyles = React.useCallback(function () {\n    var input = inputRef.current;\n    var containerWindow = ownerWindow(input);\n    var computedStyle = containerWindow.getComputedStyle(input); // If input's width is shrunk and it's not visible, don't sync height.\n\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0,\n        overflowing: false\n      };\n    }\n\n    var inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    var boxSizing = computedStyle.boxSizing;\n    var padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    var border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth); // The height of the inner content\n\n    var innerHeight = inputShallow.scrollHeight; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    var singleRowHeight = inputShallow.scrollHeight; // The height of the outer content\n\n    var outerHeight = innerHeight;\n\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    var overflowing = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle: outerHeightStyle,\n      overflowing: overflowing\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  var syncHeight = React.useCallback(function () {\n    var textareaStyles = calculateTextareaStyles();\n\n    if (isEmpty(textareaStyles)) {\n      return;\n    }\n\n    var input = inputRef.current;\n    input.style.height = \"\".concat(textareaStyles.outerHeightStyle, \"px\");\n    input.style.overflow = textareaStyles.overflowing ? 'hidden' : '';\n  }, [calculateTextareaStyles]);\n  useEnhancedEffect(function () {\n    var handleResize = function handleResize() {\n      syncHeight();\n    }; // Workaround a \"ResizeObserver loop completed with undelivered notifications\" error\n    // in test.\n    // Note that we might need to use this logic in production per https://github.com/WICG/resize-observer/issues/38\n    // Also see https://github.com/mui/mui-x/issues/8733\n\n\n    var rAF;\n\n    var rAFHandleResize = function rAFHandleResize() {\n      cancelAnimationFrame(rAF);\n      rAF = requestAnimationFrame(function () {\n        handleResize();\n      });\n    };\n\n    var debounceHandleResize = debounce(handleResize);\n    var input = inputRef.current;\n    var containerWindow = ownerWindow(input);\n    containerWindow.addEventListener('resize', debounceHandleResize);\n    var resizeObserver;\n\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(process.env.NODE_ENV === 'test' ? rAFHandleResize : handleResize);\n      resizeObserver.observe(input);\n    }\n\n    return function () {\n      debounceHandleResize.clear();\n      cancelAnimationFrame(rAF);\n      containerWindow.removeEventListener('resize', debounceHandleResize);\n\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [calculateTextareaStyles, syncHeight]);\n  useEnhancedEffect(function () {\n    syncHeight();\n  });\n\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: style\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        paddingTop: 0,\n        paddingBottom: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport { TextareaAutosize };","map":{"version":3,"sources":["C:/Projects/Mod_App_Front/node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_debounce","debounce","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_ownerWindow","ownerWindow","jsx","_jsx","jsxs","_jsxs","getStyleValue","value","parseInt","styles","shadow","visibility","position","overflow","height","top","left","transform","isEmpty","obj","undefined","Object","keys","length","outerHeightStyle","overflowing","TextareaAutosize","forwardRef","props","forwardedRef","onChange","maxRows","minRows","style","other","useRef","isControlled","current","inputRef","handleRef","shadowRef","calculateTextareaStyles","useCallback","input","containerWindow","computedStyle","getComputedStyle","width","inputShallow","placeholder","slice","boxSizing","padding","paddingBottom","paddingTop","border","borderBottomWidth","borderTopWidth","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","abs","syncHeight","textareaStyles","handleResize","rAF","rAFHandleResize","cancelAnimationFrame","requestAnimationFrame","debounceHandleResize","addEventListener","resizeObserver","ResizeObserver","process","env","NODE_ENV","observe","clear","removeEventListener","disconnect","handleChange","event","Fragment","children","ref","rows","className","readOnly","tabIndex","propTypes","string","oneOfType","number","func","object","arrayOf"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflowing;\n}\n\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/base-ui/react-textarea-autosize/)\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/base-ui/react-textarea-autosize/components-api/#textarea-autosize)\n */\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  const {\n      onChange,\n      maxRows,\n      minRows = 1,\n      style,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(forwardedRef, inputRef);\n  const shadowRef = React.useRef(null);\n  const calculateTextareaStyles = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0,\n        overflowing: false\n      };\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle.boxSizing;\n    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflowing = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflowing\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const syncHeight = React.useCallback(() => {\n    const textareaStyles = calculateTextareaStyles();\n    if (isEmpty(textareaStyles)) {\n      return;\n    }\n    const input = inputRef.current;\n    input.style.height = `${textareaStyles.outerHeightStyle}px`;\n    input.style.overflow = textareaStyles.overflowing ? 'hidden' : '';\n  }, [calculateTextareaStyles]);\n  useEnhancedEffect(() => {\n    const handleResize = () => {\n      syncHeight();\n    };\n    // Workaround a \"ResizeObserver loop completed with undelivered notifications\" error\n    // in test.\n    // Note that we might need to use this logic in production per https://github.com/WICG/resize-observer/issues/38\n    // Also see https://github.com/mui/mui-x/issues/8733\n    let rAF;\n    const rAFHandleResize = () => {\n      cancelAnimationFrame(rAF);\n      rAF = requestAnimationFrame(() => {\n        handleResize();\n      });\n    };\n    const debounceHandleResize = debounce(handleResize);\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    containerWindow.addEventListener('resize', debounceHandleResize);\n    let resizeObserver;\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(process.env.NODE_ENV === 'test' ? rAFHandleResize : handleResize);\n      resizeObserver.observe(input);\n    }\n    return () => {\n      debounceHandleResize.clear();\n      cancelAnimationFrame(rAF);\n      containerWindow.removeEventListener('resize', debounceHandleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [calculateTextareaStyles, syncHeight]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  const handleChange = event => {\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: style\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        paddingTop: 0,\n        paddingBottom: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport { TextareaAutosize };"]},"metadata":{},"sourceType":"module"}