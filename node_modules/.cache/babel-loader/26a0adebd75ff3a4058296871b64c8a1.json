{"ast":null,"code":"import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, getDefaultAppConfig, deepEqual, isBrowser, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass PlatformLoggerServiceImpl {\n  constructor(container) {\n    this.container = container;\n  } // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n\n\n  getPlatformInfoString() {\n    const providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are\n    // version components.\n\n    return providers.map(provider => {\n      if (isVersionServiceProvider(provider)) {\n        const service = provider.getImmediate();\n        return `${service.library}/${service.version}`;\n      } else {\n        return null;\n      }\n    }).filter(logString => logString).join(' ');\n  }\n\n}\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\n\n\nfunction isVersionServiceProvider(provider) {\n  const component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\"\n  /* ComponentType.VERSION */\n  ;\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.10.2\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst logger = new Logger('@firebase/app');\nconst name$n = \"@firebase/app-compat\";\nconst name$m = \"@firebase/analytics-compat\";\nconst name$l = \"@firebase/analytics\";\nconst name$k = \"@firebase/app-check-compat\";\nconst name$j = \"@firebase/app-check\";\nconst name$i = \"@firebase/auth\";\nconst name$h = \"@firebase/auth-compat\";\nconst name$g = \"@firebase/database\";\nconst name$f = \"@firebase/database-compat\";\nconst name$e = \"@firebase/functions\";\nconst name$d = \"@firebase/functions-compat\";\nconst name$c = \"@firebase/installations\";\nconst name$b = \"@firebase/installations-compat\";\nconst name$a = \"@firebase/messaging\";\nconst name$9 = \"@firebase/messaging-compat\";\nconst name$8 = \"@firebase/performance\";\nconst name$7 = \"@firebase/performance-compat\";\nconst name$6 = \"@firebase/remote-config\";\nconst name$5 = \"@firebase/remote-config-compat\";\nconst name$4 = \"@firebase/storage\";\nconst name$3 = \"@firebase/storage-compat\";\nconst name$2 = \"@firebase/firestore\";\nconst name$1 = \"@firebase/firestore-compat\";\nconst name = \"firebase\";\nconst version = \"10.11.1\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\nconst PLATFORM_LOG_STRING = {\n  [name$o]: 'fire-core',\n  [name$n]: 'fire-core-compat',\n  [name$l]: 'fire-analytics',\n  [name$m]: 'fire-analytics-compat',\n  [name$j]: 'fire-app-check',\n  [name$k]: 'fire-app-check-compat',\n  [name$i]: 'fire-auth',\n  [name$h]: 'fire-auth-compat',\n  [name$g]: 'fire-rtdb',\n  [name$f]: 'fire-rtdb-compat',\n  [name$e]: 'fire-fn',\n  [name$d]: 'fire-fn-compat',\n  [name$c]: 'fire-iid',\n  [name$b]: 'fire-iid-compat',\n  [name$a]: 'fire-fcm',\n  [name$9]: 'fire-fcm-compat',\n  [name$8]: 'fire-perf',\n  [name$7]: 'fire-perf-compat',\n  [name$6]: 'fire-rc',\n  [name$5]: 'fire-rc-compat',\n  [name$4]: 'fire-gcs',\n  [name$3]: 'fire-gcs-compat',\n  [name$2]: 'fire-fst',\n  [name$1]: 'fire-fst-compat',\n  'fire-js': 'fire-js',\n  [name]: 'fire-js-all'\n};\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @internal\r\n */\n\nconst _apps = new Map();\n/**\r\n * @internal\r\n */\n\n\nconst _serverApps = new Map();\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst _components = new Map();\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\n\n\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\n  }\n}\n/**\r\n *\r\n * @internal\r\n */\n\n\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\n\n\nfunction _registerComponent(component) {\n  const componentName = component.name;\n\n  if (_components.has(componentName)) {\n    logger.debug(`There were multiple attempts to register component ${componentName}.`);\n    return false;\n  }\n\n  _components.set(componentName, component); // add the component to existing app instances\n\n\n  for (const app of _apps.values()) {\n    _addComponent(app, component);\n  }\n\n  for (const serverApp of _serverApps.values()) {\n    _addComponent(serverApp, component);\n  }\n\n  return true;\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\n\n\nfunction _getProvider(app, name) {\n  const heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n\n  return app.container.getProvider(name);\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\n\n\nfunction _removeServiceInstance(app, name) {\n  let instanceIdentifier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ENTRY_NAME;\n\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\r\n *\r\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\r\n *\r\n * @returns true if the provide object is of type FirebaseApp.\r\n *\r\n * @internal\r\n */\n\n\nfunction _isFirebaseApp(obj) {\n  return obj.options !== undefined;\n}\n/**\r\n *\r\n * @param obj - an object of type FirebaseApp.\r\n *\r\n * @returns true if the provided object is of type FirebaseServerAppImpl.\r\n *\r\n * @internal\r\n */\n\n\nfunction _isFirebaseServerApp(obj) {\n  return obj.settings !== undefined;\n}\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\n\n\nfunction _clearComponents() {\n  _components.clear();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"no-app\"\n  /* AppError.NO_APP */\n  ]: \"No Firebase App '{$appName}' has been created - \" + 'call initializeApp() first',\n  [\"bad-app-name\"\n  /* AppError.BAD_APP_NAME */\n  ]: \"Illegal App name: '{$appName}'\",\n  [\"duplicate-app\"\n  /* AppError.DUPLICATE_APP */\n  ]: \"Firebase App named '{$appName}' already exists with different options or config\",\n  [\"app-deleted\"\n  /* AppError.APP_DELETED */\n  ]: \"Firebase App named '{$appName}' already deleted\",\n  [\"server-app-deleted\"\n  /* AppError.SERVER_APP_DELETED */\n  ]: 'Firebase Server App has been deleted',\n  [\"no-options\"\n  /* AppError.NO_OPTIONS */\n  ]: 'Need to provide options, when not being deployed to hosting via source.',\n  [\"invalid-app-argument\"\n  /* AppError.INVALID_APP_ARGUMENT */\n  ]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.',\n  [\"invalid-log-argument\"\n  /* AppError.INVALID_LOG_ARGUMENT */\n  ]: 'First argument to `onLog` must be null or a function.',\n  [\"idb-open\"\n  /* AppError.IDB_OPEN */\n  ]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-get\"\n  /* AppError.IDB_GET */\n  ]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-set\"\n  /* AppError.IDB_WRITE */\n  ]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-delete\"\n  /* AppError.IDB_DELETE */\n  ]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"finalization-registry-not-supported\"\n  /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */\n  ]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n  [\"invalid-server-app-environment\"\n  /* AppError.INVALID_SERVER_APP_ENVIRONMENT */\n  ]: 'FirebaseServerApp is not for use in browser environments.'\n};\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass FirebaseAppImpl {\n  constructor(options, config, container) {\n    this._isDeleted = false;\n    this._options = Object.assign({}, options);\n    this._config = Object.assign({}, config);\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new Component('app', () => this, \"PUBLIC\"\n    /* ComponentType.PUBLIC */\n    ));\n  }\n\n  get automaticDataCollectionEnabled() {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name() {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options() {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config() {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container() {\n    return this._container;\n  }\n\n  get isDeleted() {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val) {\n    this._isDeleted = val;\n  }\n  /**\r\n   * This function will throw an Error if the App has already been deleted -\r\n   * use before performing API actions on the App.\r\n   */\n\n\n  checkDestroyed() {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(\"app-deleted\"\n      /* AppError.APP_DELETED */\n      , {\n        appName: this._name\n      });\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass FirebaseServerAppImpl extends FirebaseAppImpl {\n  constructor(options, serverConfig, name, container) {\n    // Build configuration parameters for the FirebaseAppImpl base class.\n    const automaticDataCollectionEnabled = serverConfig.automaticDataCollectionEnabled !== undefined ? serverConfig.automaticDataCollectionEnabled : false; // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n\n    const config = {\n      name,\n      automaticDataCollectionEnabled\n    };\n\n    if (options.apiKey !== undefined) {\n      // Construct the parent FirebaseAppImp object.\n      super(options, config, container);\n    } else {\n      const appImpl = options;\n      super(appImpl.options, config, container);\n    } // Now construct the data for the FirebaseServerAppImpl.\n\n\n    this._serverConfig = Object.assign({\n      automaticDataCollectionEnabled\n    }, serverConfig);\n    this._finalizationRegistry = new FinalizationRegistry(() => {\n      this.automaticCleanup();\n    });\n    this._refCount = 0;\n    this.incRefCount(this._serverConfig.releaseOnDeref); // Do not retain a hard reference to the dref object, otherwise the FinalizationRegisry\n    // will never trigger.\n\n    this._serverConfig.releaseOnDeref = undefined;\n    serverConfig.releaseOnDeref = undefined;\n    registerVersion(name$o, version$1, 'serverapp');\n  }\n\n  toJSON() {\n    return undefined;\n  }\n\n  get refCount() {\n    return this._refCount;\n  } // Increment the reference count of this server app. If an object is provided, register it\n  // with the finalization registry.\n\n\n  incRefCount(obj) {\n    if (this.isDeleted) {\n      return;\n    }\n\n    this._refCount++;\n\n    if (obj !== undefined) {\n      this._finalizationRegistry.register(obj, this);\n    }\n  } // Decrement the reference count.\n\n\n  decRefCount() {\n    if (this.isDeleted) {\n      return 0;\n    }\n\n    return --this._refCount;\n  } // Invoked by the FinalizationRegistry callback to note that this app should go through its\n  // reference counts and delete itself if no reference count remain. The coordinating logic that\n  // handles this is in deleteApp(...).\n\n\n  automaticCleanup() {\n    void deleteApp(this);\n  }\n\n  get settings() {\n    this.checkDestroyed();\n    return this._serverConfig;\n  }\n  /**\r\n   * This function will throw an Error if the App has already been deleted -\r\n   * use before performing API actions on the App.\r\n   */\n\n\n  checkDestroyed() {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(\"server-app-deleted\"\n      /* AppError.SERVER_APP_DELETED */\n      );\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\n\n\nconst SDK_VERSION = version;\n\nfunction initializeApp(_options) {\n  let rawConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = {\n      name\n    };\n  }\n\n  const config = Object.assign({\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false\n  }, rawConfig);\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\"\n    /* AppError.BAD_APP_NAME */\n    , {\n      appName: String(name)\n    });\n  }\n\n  options || (options = getDefaultAppConfig());\n\n  if (!options) {\n    throw ERROR_FACTORY.create(\"no-options\"\n    /* AppError.NO_OPTIONS */\n    );\n  }\n\n  const existingApp = _apps.get(name);\n\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\"\n      /* AppError.DUPLICATE_APP */\n      , {\n        appName: name\n      });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\nfunction initializeServerApp(_options, _serverAppConfig) {\n  if (isBrowser()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(\"invalid-server-app-environment\"\n    /* AppError.INVALID_SERVER_APP_ENVIRONMENT */\n    );\n  }\n\n  if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n    _serverAppConfig.automaticDataCollectionEnabled = false;\n  }\n\n  let appOptions;\n\n  if (_isFirebaseApp(_options)) {\n    appOptions = _options.options;\n  } else {\n    appOptions = _options;\n  } // Build an app name based on a hash of the configuration options.\n\n\n  const nameObj = Object.assign(Object.assign({}, _serverAppConfig), appOptions); // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  const hashCode = s => {\n    return [...s].reduce((hash, c) => Math.imul(31, hash) + c.charCodeAt(0) | 0, 0);\n  };\n\n  if (_serverAppConfig.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\"finalization-registry-not-supported\"\n      /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */\n      , {});\n    }\n  }\n\n  const nameString = '' + hashCode(JSON.stringify(nameObj));\n\n  const existingApp = _serverApps.get(nameString);\n\n  if (existingApp) {\n    existingApp.incRefCount(_serverAppConfig.releaseOnDeref);\n    return existingApp;\n  }\n\n  const container = new ComponentContainer(nameString);\n\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseServerAppImpl(appOptions, _serverAppConfig, nameString, container);\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\n\n\nfunction getApp() {\n  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n\n  const app = _apps.get(name);\n\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\"\n    /* AppError.NO_APP */\n    , {\n      appName: name\n    });\n  }\n\n  return app;\n}\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\n\n\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nasync function deleteApp(app) {\n  let cleanupProviders = false;\n  const name = app.name;\n\n  if (_apps.has(name)) {\n    cleanupProviders = true;\n\n    _apps.delete(name);\n  } else if (_serverApps.has(name)) {\n    const firebaseServerApp = app;\n\n    if (firebaseServerApp.decRefCount() <= 0) {\n      _serverApps.delete(name);\n\n      cleanupProviders = true;\n    }\n  }\n\n  if (cleanupProviders) {\n    await Promise.all(app.container.getProviders().map(provider => provider.delete()));\n    app.isDeleted = true;\n  }\n}\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\n\n\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  var _a; // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n\n\n  let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n\n  if (variant) {\n    library += `-${variant}`;\n  }\n\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n\n  if (libraryMismatch || versionMismatch) {\n    const warning = [`Unable to register library \"${library}\" with version \"${version}\":`];\n\n    if (libraryMismatch) {\n      warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n\n    if (versionMismatch) {\n      warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    logger.warn(warning.join(' '));\n    return;\n  }\n\n  _registerComponent(new Component(`${library}-version`, () => ({\n    library,\n    version\n  }), \"VERSION\"\n  /* ComponentType.VERSION */\n  ));\n}\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\n\n\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\"\n    /* AppError.INVALID_LOG_ARGUMENT */\n    );\n  }\n\n  setUserLogHandler(logCallback, options);\n}\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\n\n\nfunction setLogLevel(logLevel) {\n  setLogLevel$1(logLevel);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(\"idb-open\"\n      /* AppError.IDB_OPEN */\n      , {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n\n  return dbPromise;\n}\n\nasync function readHeartbeatsFromIndexedDB(app) {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME);\n    const result = await tx.objectStore(STORE_NAME).get(computeKey(app)); // We already have the value but tx.done can throw,\n    // so we need to await it here to catch errors\n\n    await tx.done;\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(\"idb-get\"\n      /* AppError.IDB_GET */\n      , {\n        originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(\"idb-set\"\n      /* AppError.IDB_WRITE */\n      , {\n        originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app) {\n  return `${app.name}!${app.options.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst MAX_HEADER_BYTES = 1024; // 30 days\n\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nclass HeartbeatServiceImpl {\n  constructor(container) {\n    this.container = container;\n    /**\r\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n     * the header string.\r\n     * Stores one record per date. This will be consolidated into the standard\r\n     * format of one record per user agent string before being sent as a header.\r\n     * Populated from indexedDB when the controller is instantiated and should\r\n     * be kept in sync with indexedDB.\r\n     * Leave public for easier testing.\r\n     */\n\n    this._heartbeatsCache = null;\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\r\n   * Called to report a heartbeat. The function will generate\r\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n   * to IndexedDB.\r\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n   * already logged, subsequent calls to this function in the same day will be ignored.\r\n   */\n\n\n  async triggerHeartbeat() {\n    var _a, _b;\n\n    const platformLogger = this.container.getProvider('platform-logger').getImmediate(); // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n\n    if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise; // If we failed to construct a heartbeats cache, then return immediately.\n\n      if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {\n        return;\n      }\n    } // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n\n\n    if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({\n        date,\n        agent\n      });\n    } // Remove entries older than 30 days.\n\n\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\n      const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n      const now = Date.now();\n      return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n    });\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n  /**\r\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n   * It also clears all heartbeats from memory as well as in IndexedDB.\r\n   *\r\n   * NOTE: Consuming product SDKs should not send the header if this method\r\n   * returns an empty string.\r\n   */\n\n\n  async getHeartbeatsHeader() {\n    var _a;\n\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    } // If it's still null or the array is empty, there is no data to send.\n\n\n    if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0) {\n      return '';\n    }\n\n    const date = getUTCDateString(); // Extract as many heartbeats from the cache as will fit under the size limit.\n\n    const {\n      heartbeatsToSend,\n      unsentEntries\n    } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\n    const headerString = base64urlEncodeWithoutPadding(JSON.stringify({\n      version: 2,\n      heartbeats: heartbeatsToSend\n    })); // Store last sent date to prevent another being logged/sent for the same day.\n\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries; // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = []; // Do not wait for this, to reduce latency.\n\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n\n    return headerString;\n  }\n\n}\n\nfunction getUTCDateString() {\n  const today = new Date(); // Returns date format 'YYYY-MM-DD'\n\n  return today.toISOString().substring(0, 10);\n}\n\nfunction extractHeartbeatsForHeader(heartbeatsCache) {\n  let maxSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_HEADER_BYTES;\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend = []; // Single date format heartbeats that are not sent.\n\n  let unsentEntries = heartbeatsCache.slice();\n\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\n\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date); // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    } // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n\n\n    unsentEntries = unsentEntries.slice(1);\n  }\n\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nclass HeartbeatStorageImpl {\n  constructor(app) {\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n\n  async runIndexedDBEnvironmentCheck() {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable().then(() => true).catch(() => false);\n    }\n  }\n  /**\r\n   * Read all heartbeats.\r\n   */\n\n\n  async read() {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return {\n        heartbeats: []\n      };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n\n      if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return {\n          heartbeats: []\n        };\n      }\n    }\n  } // overwrite the storage with the provided heartbeats\n\n\n  async overwrite(heartbeatsObject) {\n    var _a;\n\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  } // add heartbeats\n\n\n  async add(heartbeatsObject) {\n    var _a;\n\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [...existingHeartbeatsObject.heartbeats, ...heartbeatsObject.heartbeats]\n      });\n    }\n  }\n\n}\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\n\n\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding( // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerCoreComponents(variant) {\n  _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\"\n  /* ComponentType.PRIVATE */\n  ));\n\n  _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\"\n  /* ComponentType.PRIVATE */\n  )); // Register `app` package.\n\n\n  registerVersion(name$o, version$1, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name$o, version$1, 'esm2017'); // Register platform SDK identifier (no version).\n\n  registerVersion('fire-js', '');\n}\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\n\n\nregisterCoreComponents('');\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _isFirebaseApp, _isFirebaseServerApp, _registerComponent, _removeServiceInstance, _serverApps, deleteApp, getApp, getApps, initializeApp, initializeServerApp, onLog, registerVersion, setLogLevel };","map":{"version":3,"mappings":"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","names":["PlatformLoggerServiceImpl","constructor","container","getPlatformInfoString","providers","getProviders","map","provider","isVersionServiceProvider","service","getImmediate","library","version","filter","logString","join","component","getComponent","type","logger","Logger","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","appName","appCompatName","analyticsName","analyticsCompatName","appCheckName","appCheckCompatName","authName","authCompatName","databaseName","databaseCompatName","functionsName","functionsCompatName","installationsName","installationsCompatName","messagingName","messagingCompatName","performanceName","performanceCompatName","remoteConfigName","remoteConfigCompatName","storageName","storageCompatName","firestoreName","firestoreCompatName","packageName","Map","app","addComponent","e","debug","name","addOrOverwriteComponent","_registerComponent","componentName","_components","has","set","_apps","values","_addComponent","serverApp","_serverApps","heartbeatController","getProvider","optional","triggerHeartbeat","_removeServiceInstance","instanceIdentifier","_getProvider","clearInstance","_isFirebaseApp","obj","options","undefined","_isFirebaseServerApp","settings","_clearComponents","clear","ERRORS","ERROR_FACTORY","ErrorFactory","FirebaseAppImpl","config","_isDeleted","_options","Object","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","Component","checkDestroyed","val","isDeleted","create","FirebaseServerAppImpl","serverConfig","apiKey","appImpl","_serverConfig","_finalizationRegistry","FinalizationRegistry","automaticCleanup","_refCount","incRefCount","releaseOnDeref","registerVersion","toJSON","refCount","register","decRefCount","deleteApp","SDK_VERSION","initializeApp","rawConfig","String","getDefaultAppConfig","existingApp","get","deepEqual","ComponentContainer","newApp","_serverAppConfig","isBrowser","appOptions","nameObj","hashCode","s","reduce","hash","c","Math","imul","charCodeAt","nameString","JSON","stringify","getApps","Array","from","cleanupProviders","delete","firebaseServerApp","Promise","all","libraryKeyOrName","variant","_a","libraryMismatch","match","versionMismatch","warning","push","warn","logCallback","setUserLogHandler","setLogLevel","logLevel","setLogLevelImpl","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","openDB","upgrade","db","oldVersion","createObjectStore","console","catch","originalErrorMessage","message","readHeartbeatsFromIndexedDB","tx","transaction","result","objectStore","computeKey","done","FirebaseError","idbGetError","writeHeartbeatsToIndexedDB","heartbeatObject","put","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","then","platformLogger","agent","date","getUTCDateString","_b","lastSentHeartbeatDate","heartbeats","some","singleDateHeartbeat","hbTimestamp","Date","valueOf","now","overwrite","getHeartbeatsHeader","length","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","base64urlEncodeWithoutPadding","today","toISOString","substring","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","isIndexedDBAvailable","validateIndexedDBOpenable","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","add","registerCoreComponents"],"sources":["C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\platformLoggerService.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\logger.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\constants.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\internal.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\errors.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\firebaseApp.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\firebaseServerApp.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\api.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\indexeddb.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\heartbeatService.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\registerCoreComponents.ts","C:\\Projects\\Mod_App_Front\\node_modules\\@firebase\\app\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseServerApp\n} from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * @internal\n */\nexport const _serverApps = new Map<string, FirebaseServerApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  for (const serverApp of _serverApps.values()) {\n    _addComponent(serverApp as FirebaseServerAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\nexport function _isFirebaseApp(\n  obj: FirebaseApp | FirebaseOptions\n): obj is FirebaseApp {\n  return (obj as FirebaseApp).options !== undefined;\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\nexport function _isFirebaseServerApp(\n  obj: FirebaseApp | FirebaseServerApp\n): obj is FirebaseServerApp {\n  return (obj as FirebaseServerApp).settings !== undefined;\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  SERVER_APP_DELETED = 'server-app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete',\n  FINALIZATION_REGISTRY_NOT_SUPPORTED = 'finalization-registry-not-supported',\n  INVALID_SERVER_APP_ENVIRONMENT = 'invalid-server-app-environment'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}'\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.SERVER_APP_DELETED]: 'Firebase Server App has been deleted',\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]:\n    'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n  [AppError.INVALID_SERVER_APP_ENVIRONMENT]:\n    'FirebaseServerApp is not for use in browser environments.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]: { appName?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  protected readonly _options: FirebaseOptions;\n  protected readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  protected _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppSettings,\n  FirebaseServerApp,\n  FirebaseServerAppSettings,\n  FirebaseOptions\n} from './public-types';\nimport { deleteApp, registerVersion } from './api';\nimport { ComponentContainer } from '@firebase/component';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport { name as packageName, version } from '../package.json';\n\nexport class FirebaseServerAppImpl\n  extends FirebaseAppImpl\n  implements FirebaseServerApp\n{\n  private readonly _serverConfig: FirebaseServerAppSettings;\n  private _finalizationRegistry: FinalizationRegistry<object>;\n  private _refCount: number;\n\n  constructor(\n    options: FirebaseOptions | FirebaseAppImpl,\n    serverConfig: FirebaseServerAppSettings,\n    name: string,\n    container: ComponentContainer\n  ) {\n    // Build configuration parameters for the FirebaseAppImpl base class.\n    const automaticDataCollectionEnabled =\n      serverConfig.automaticDataCollectionEnabled !== undefined\n        ? serverConfig.automaticDataCollectionEnabled\n        : false;\n\n    // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n    const config: Required<FirebaseAppSettings> = {\n      name,\n      automaticDataCollectionEnabled\n    };\n\n    if ((options as FirebaseOptions).apiKey !== undefined) {\n      // Construct the parent FirebaseAppImp object.\n      super(options as FirebaseOptions, config, container);\n    } else {\n      const appImpl: FirebaseAppImpl = options as FirebaseAppImpl;\n      super(appImpl.options, config, container);\n    }\n\n    // Now construct the data for the FirebaseServerAppImpl.\n    this._serverConfig = {\n      automaticDataCollectionEnabled,\n      ...serverConfig\n    };\n\n    this._finalizationRegistry = new FinalizationRegistry(() => {\n      this.automaticCleanup();\n    });\n\n    this._refCount = 0;\n    this.incRefCount(this._serverConfig.releaseOnDeref);\n\n    // Do not retain a hard reference to the dref object, otherwise the FinalizationRegisry\n    // will never trigger.\n    this._serverConfig.releaseOnDeref = undefined;\n    serverConfig.releaseOnDeref = undefined;\n\n    registerVersion(packageName, version, 'serverapp');\n  }\n\n  toJSON(): undefined {\n    return undefined;\n  }\n\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  // Increment the reference count of this server app. If an object is provided, register it\n  // with the finalization registry.\n  incRefCount(obj: object | undefined): void {\n    if (this.isDeleted) {\n      return;\n    }\n    this._refCount++;\n    if (obj !== undefined) {\n      this._finalizationRegistry.register(obj, this);\n    }\n  }\n\n  // Decrement the reference count.\n  decRefCount(): number {\n    if (this.isDeleted) {\n      return 0;\n    }\n    return --this._refCount;\n  }\n\n  // Invoked by the FinalizationRegistry callback to note that this app should go through its\n  // reference counts and delete itself if no reference count remain. The coordinating logic that\n  // handles this is in deleteApp(...).\n  private automaticCleanup(): void {\n    void deleteApp(this);\n  }\n\n  get settings(): FirebaseServerAppSettings {\n    this.checkDestroyed();\n    return this._serverConfig;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.SERVER_APP_DELETED);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseServerApp,\n  FirebaseOptions,\n  FirebaseAppSettings,\n  FirebaseServerAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\nimport {\n  _apps,\n  _components,\n  _isFirebaseApp,\n  _registerComponent,\n  _serverApps\n} from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig, isBrowser } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseServerApp} instance.\n *\n * The `FirebaseServerApp` is similar to `FirebaseApp`, but is intended for execution in\n * server side rendering environments only. Initialization will fail if invoked from a\n * browser environment.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize an instance of `FirebaseServerApp`.\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeServerApp({\n *     apiKey: \"AIza....\",                             // Auth / General Use\n *     authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *     databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *     storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *     messagingSenderId: \"123456789\"                  // Cloud Messaging\n *   },\n *   {\n *    authIdToken: \"Your Auth ID Token\"\n *   });\n * ```\n *\n * @param options - `Firebase.AppOptions` to configure the app's services, or a\n *   a `FirebaseApp` instance which contains the `AppOptions` within.\n * @param config - `FirebaseServerApp` configuration.\n *\n * @returns The initialized `FirebaseServerApp`.\n *\n * @public\n */\nexport function initializeServerApp(\n  options: FirebaseOptions | FirebaseApp,\n  config: FirebaseServerAppSettings\n): FirebaseServerApp;\n\nexport function initializeServerApp(\n  _options: FirebaseOptions | FirebaseApp,\n  _serverAppConfig: FirebaseServerAppSettings\n): FirebaseServerApp {\n  if (isBrowser()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(AppError.INVALID_SERVER_APP_ENVIRONMENT);\n  }\n\n  if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n    _serverAppConfig.automaticDataCollectionEnabled = false;\n  }\n\n  let appOptions: FirebaseOptions;\n  if (_isFirebaseApp(_options)) {\n    appOptions = _options.options;\n  } else {\n    appOptions = _options;\n  }\n\n  // Build an app name based on a hash of the configuration options.\n  const nameObj = {\n    ..._serverAppConfig,\n    ...appOptions\n  };\n\n  // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  const hashCode = (s: string): number => {\n    return [...s].reduce(\n      (hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0,\n      0\n    );\n  };\n\n  if (_serverAppConfig.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\n        AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED,\n        {}\n      );\n    }\n  }\n\n  const nameString = '' + hashCode(JSON.stringify(nameObj));\n  const existingApp = _serverApps.get(nameString) as FirebaseServerApp;\n  if (existingApp) {\n    (existingApp as FirebaseServerAppImpl).incRefCount(\n      _serverAppConfig.releaseOnDeref\n    );\n    return existingApp;\n  }\n\n  const container = new ComponentContainer(nameString);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseServerAppImpl(\n    appOptions,\n    _serverAppConfig,\n    nameString,\n    container\n  );\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  let cleanupProviders = false;\n  const name = app.name;\n  if (_apps.has(name)) {\n    cleanupProviders = true;\n    _apps.delete(name);\n  } else if (_serverApps.has(name)) {\n    const firebaseServerApp = app as FirebaseServerAppImpl;\n    if (firebaseServerApp.decRefCount() <= 0) {\n      _serverApps.delete(name);\n      cleanupProviders = true;\n    }\n  }\n\n  if (cleanupProviders) {\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME);\n    const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\n    // We already have the value but tx.done can throw,\n    // so we need to await it here to catch errors\n    await tx.done;\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache?.heartbeats == null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n      // If we failed to construct a heartbeats cache, then return immediately.\n      if (this._heartbeatsCache?.heartbeats == null) {\n        return;\n      }\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache?.heartbeats == null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return { heartbeats: [] };\n      }\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n"]},"metadata":{},"sourceType":"module"}