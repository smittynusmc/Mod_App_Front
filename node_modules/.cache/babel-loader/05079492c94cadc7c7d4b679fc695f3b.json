{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:/Projects/Mod_App_Front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\n/**\n * @ignore - do not document.\n *\n * Use this function determine the host element correctly on the server (in a SSR context, for example Next.js)\n */\n\nexport function useRootElementName(parameters) {\n  var _parameters$rootEleme = parameters.rootElementName,\n      rootElementNameProp = _parameters$rootEleme === void 0 ? '' : _parameters$rootEleme,\n      componentName = parameters.componentName;\n\n  var _React$useState = React.useState(rootElementNameProp.toUpperCase()),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      rootElementName = _React$useState2[0],\n      setRootElementName = _React$useState2[1];\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (rootElementNameProp && rootElementName !== rootElementNameProp.toUpperCase()) {\n        console.error(\"useRootElementName: the `rootElementName` prop of \".concat(componentName ? \"the \".concat(componentName, \" component\") : 'a component', \" expected the '\").concat(rootElementNameProp, \"' element, but a '\").concat(rootElementName.toLowerCase(), \"' was rendered instead\"), 'This may cause hydration issues in an SSR context, for example in a Next.js app');\n      }\n    }, [rootElementNameProp, rootElementName, componentName]);\n  }\n\n  var updateRootElementName = React.useCallback(function (instance) {\n    var _instance$tagName;\n\n    setRootElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : '');\n  }, []);\n  return [rootElementName, updateRootElementName];\n}","map":{"version":3,"sources":["C:/Projects/Mod_App_Front/node_modules/@mui/base/utils/useRootElementName.js"],"names":["React","useRootElementName","parameters","rootElementName","rootElementNameProp","componentName","useState","toUpperCase","setRootElementName","process","env","NODE_ENV","useEffect","console","error","toLowerCase","updateRootElementName","useCallback","instance","_instance$tagName","tagName"],"mappings":"AAAA;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC;AAC7C,8BAGIA,UAHJ,CACEC,eADF;AAAA,MACmBC,mBADnB,sCACyC,EADzC;AAAA,MAEEC,aAFF,GAGIH,UAHJ,CAEEG,aAFF;;AAIA,wBAA8CL,KAAK,CAACM,QAAN,CAAeF,mBAAmB,CAACG,WAApB,EAAf,CAA9C;AAAA;AAAA,MAAOJ,eAAP;AAAA,MAAwBK,kBAAxB;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAX,IAAAA,KAAK,CAACY,SAAN,CAAgB,YAAM;AACpB,UAAIR,mBAAmB,IAAID,eAAe,KAAKC,mBAAmB,CAACG,WAApB,EAA/C,EAAkF;AAChFM,QAAAA,OAAO,CAACC,KAAR,6DAAqET,aAAa,iBAAUA,aAAV,kBAAsC,aAAxH,4BAAuJD,mBAAvJ,+BAA+LD,eAAe,CAACY,WAAhB,EAA/L,6BAAsP,iFAAtP;AACD;AACF,KAJD,EAIG,CAACX,mBAAD,EAAsBD,eAAtB,EAAuCE,aAAvC,CAJH;AAKD;;AACD,MAAMW,qBAAqB,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,UAAAC,QAAQ,EAAI;AAC1D,QAAIC,iBAAJ;;AACAX,IAAAA,kBAAkB,CAAC,CAACW,iBAAiB,GAAGD,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACE,OAA1D,KAAsE,IAAtE,GAA6ED,iBAA7E,GAAiG,EAAlG,CAAlB;AACD,GAH6B,EAG3B,EAH2B,CAA9B;AAIA,SAAO,CAAChB,eAAD,EAAkBa,qBAAlB,CAAP;AACD","sourcesContent":["'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - do not document.\n *\n * Use this function determine the host element correctly on the server (in a SSR context, for example Next.js)\n */\nexport function useRootElementName(parameters) {\n  const {\n    rootElementName: rootElementNameProp = '',\n    componentName\n  } = parameters;\n  const [rootElementName, setRootElementName] = React.useState(rootElementNameProp.toUpperCase());\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (rootElementNameProp && rootElementName !== rootElementNameProp.toUpperCase()) {\n        console.error(`useRootElementName: the \\`rootElementName\\` prop of ${componentName ? `the ${componentName} component` : 'a component'} expected the '${rootElementNameProp}' element, but a '${rootElementName.toLowerCase()}' was rendered instead`, 'This may cause hydration issues in an SSR context, for example in a Next.js app');\n      }\n    }, [rootElementNameProp, rootElementName, componentName]);\n  }\n  const updateRootElementName = React.useCallback(instance => {\n    var _instance$tagName;\n    setRootElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : '');\n  }, []);\n  return [rootElementName, updateRootElementName];\n}"]},"metadata":{},"sourceType":"module"}