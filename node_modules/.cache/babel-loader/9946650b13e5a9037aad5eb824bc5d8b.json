{"ast":null,"code":"import _toConsumableArray from\"C:/Projects/Mod_App_Front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"C:/Projects/Mod_App_Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Projects/Mod_App_Front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Projects\\\\Mod_App_Front\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import React,{useState,useEffect}from\"react\";import axios from\"axios\";import\"./YouTubeComments.css\";// Import the new CSS file\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var YouTubeComments=function YouTubeComments(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),videoId=_useState2[0],setVideoId=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),commentAuthors=_useState4[0],setCommentAuthors=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),accessToken=_useState6[0],setAccessToken=_useState6[1];var _useState7=useState(10),_useState8=_slicedToArray(_useState7,2),maxResults=_useState8[0],setMaxResults=_useState8[1];// Default to 10 comments per request\nvar _useState9=useState(null),_useState10=_slicedToArray(_useState9,2),error=_useState10[0],setError=_useState10[1];useEffect(function(){var urlParams=new URLSearchParams(window.location.search);var token=urlParams.get(\"access_token\");if(token){setAccessToken(token);}},[]);var extractVideoId=function extractVideoId(url){var urlObj=new URL(url);var params=new URLSearchParams(urlObj.search);if(params.has(\"v\")){return params.get(\"v\");}// Handle other YouTube URL formats if necessary\nvar pathname=urlObj.pathname;if(pathname.startsWith(\"/embed/\")){return pathname.split(\"/embed/\")[1];}if(pathname.startsWith(\"/v/\")){return pathname.split(\"/v/\")[1];}if(pathname.startsWith(\"/watch\")){return params.get(\"v\");}return url;};var handleAuth=function handleAuth(){window.location.href=\"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/auth/google\";// Replace with your Cloud Run URL\n};var fetchComments=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var validVideoId,response,commentThreads,authors;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setError(null);validVideoId=extractVideoId(videoId);_context.prev=2;_context.next=5;return axios.post(\"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/youtube/comments\",{// Replace with your Cloud Run URL\nvideoId:validVideoId,accessToken:accessToken,maxResults:maxResults});case 5:response=_context.sent;commentThreads=response.data;authors=commentThreads.flatMap(function(thread){return[thread.snippet.topLevelComment.snippet.authorDisplayName].concat(_toConsumableArray(thread.replies?thread.replies.comments.map(function(reply){return reply.snippet.authorDisplayName;}):[]));});setCommentAuthors(authors);_context.next=15;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](2);console.error(\"Error fetching comment threads\",_context.t0);if(_context.t0.response&&_context.t0.response.status===404){setError(\"Video not found\");}else{setError(\"Failed to fetch comments. Please try again.\");}case 15:case\"end\":return _context.stop();}}},_callee,null,[[2,11]]);}));return function fetchComments(){return _ref.apply(this,arguments);};}();var selectWinner=function selectWinner(){if(commentAuthors.length===0)return;var winner=commentAuthors[Math.floor(Math.random()*commentAuthors.length)];alert(\"The winner is: \".concat(winner));};return/*#__PURE__*/_jsx(\"div\",{children:!accessToken?/*#__PURE__*/_jsx(\"button\",{onClick:handleAuth,children:\"Authenticate with Google\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:videoId,onChange:function onChange(e){return setVideoId(e.target.value);},placeholder:\"Enter YouTube Video URL or ID\"}),/*#__PURE__*/_jsxs(\"select\",{value:maxResults,onChange:function onChange(e){return setMaxResults(Number(e.target.value));},children:[/*#__PURE__*/_jsx(\"option\",{value:10,children:\"10\"}),/*#__PURE__*/_jsx(\"option\",{value:15,children:\"15\"}),/*#__PURE__*/_jsx(\"option\",{value:25,children:\"25\"}),/*#__PURE__*/_jsx(\"option\",{value:50,children:\"50\"}),/*#__PURE__*/_jsx(\"option\",{value:100,children:\"100\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:fetchComments,children:\"Fetch Comments\"}),error&&/*#__PURE__*/_jsx(\"p\",{style:{color:'red'},children:error}),/*#__PURE__*/_jsx(\"div\",{className:\"scrollable-list\",children:commentAuthors.map(function(author,index){return/*#__PURE__*/_jsx(\"p\",{children:author},index);})}),commentAuthors.length>0&&/*#__PURE__*/_jsx(\"button\",{onClick:selectWinner,children:\"Select Winner\"})]})});};export default YouTubeComments;","map":{"version":3,"sources":["C:/Projects/Mod_App_Front/src/components/YouTubeComments.js"],"names":["React","useState","useEffect","axios","YouTubeComments","videoId","setVideoId","commentAuthors","setCommentAuthors","accessToken","setAccessToken","maxResults","setMaxResults","error","setError","urlParams","URLSearchParams","window","location","search","token","get","extractVideoId","url","urlObj","URL","params","has","pathname","startsWith","split","handleAuth","href","fetchComments","validVideoId","post","response","commentThreads","data","authors","flatMap","thread","snippet","topLevelComment","authorDisplayName","replies","comments","map","reply","console","status","selectWinner","length","winner","Math","floor","random","alert","e","target","value","Number","color","author","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./YouTubeComments.css\"; // Import the new CSS file\r\n\r\nconst YouTubeComments = () => {\r\n  const [videoId, setVideoId] = useState(\"\");\r\n  const [commentAuthors, setCommentAuthors] = useState([]);\r\n  const [accessToken, setAccessToken] = useState(\"\");\r\n  const [maxResults, setMaxResults] = useState(10); // Default to 10 comments per request\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const token = urlParams.get(\"access_token\");\r\n    if (token) {\r\n      setAccessToken(token);\r\n    }\r\n  }, []);\r\n\r\n  const extractVideoId = (url) => {\r\n    const urlObj = new URL(url);\r\n    const params = new URLSearchParams(urlObj.search);\r\n    if (params.has(\"v\")) {\r\n      return params.get(\"v\");\r\n    }\r\n    // Handle other YouTube URL formats if necessary\r\n    const pathname = urlObj.pathname;\r\n    if (pathname.startsWith(\"/embed/\")) {\r\n      return pathname.split(\"/embed/\")[1];\r\n    }\r\n    if (pathname.startsWith(\"/v/\")) {\r\n      return pathname.split(\"/v/\")[1];\r\n    }\r\n    if (pathname.startsWith(\"/watch\")) {\r\n      return params.get(\"v\");\r\n    }\r\n    return url;\r\n  };\r\n\r\n  const handleAuth = () => {\r\n    window.location.href = \"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/auth/google\"; // Replace with your Cloud Run URL\r\n  };\r\n\r\n  const fetchComments = async () => {\r\n    setError(null);\r\n    const validVideoId = extractVideoId(videoId);\r\n    try {\r\n      const response = await axios.post(\"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/youtube/comments\", { // Replace with your Cloud Run URL\r\n        videoId: validVideoId,\r\n        accessToken,\r\n        maxResults,\r\n      });\r\n      const commentThreads = response.data;\r\n      const authors = commentThreads.flatMap(thread => [\r\n        thread.snippet.topLevelComment.snippet.authorDisplayName,\r\n        ...(thread.replies ? thread.replies.comments.map(reply => reply.snippet.authorDisplayName) : [])\r\n      ]);\r\n      setCommentAuthors(authors);\r\n    } catch (error) {\r\n      console.error(\"Error fetching comment threads\", error);\r\n      if (error.response && error.response.status === 404) {\r\n        setError(\"Video not found\");\r\n      } else {\r\n        setError(\"Failed to fetch comments. Please try again.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const selectWinner = () => {\r\n    if (commentAuthors.length === 0) return;\r\n    const winner = commentAuthors[Math.floor(Math.random() * commentAuthors.length)];\r\n    alert(`The winner is: ${winner}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!accessToken ? (\r\n        <button onClick={handleAuth}>Authenticate with Google</button>\r\n      ) : (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            value={videoId}\r\n            onChange={(e) => setVideoId(e.target.value)}\r\n            placeholder=\"Enter YouTube Video URL or ID\"\r\n          />\r\n          <select value={maxResults} onChange={(e) => setMaxResults(Number(e.target.value))}>\r\n            <option value={10}>10</option>\r\n            <option value={15}>15</option>\r\n            <option value={25}>25</option>\r\n            <option value={50}>50</option>\r\n            <option value={100}>100</option>\r\n          </select>\r\n          <button onClick={fetchComments}>Fetch Comments</button>\r\n          {error && <p style={{ color: 'red' }}>{error}</p>}\r\n          <div className=\"scrollable-list\">\r\n            {commentAuthors.map((author, index) => (\r\n              <p key={index}>{author}</p>\r\n            ))}\r\n          </div>\r\n          {commentAuthors.length > 0 && (\r\n            <button onClick={selectWinner}>Select Winner</button>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YouTubeComments;\r\n"]},"metadata":{},"sourceType":"module"}