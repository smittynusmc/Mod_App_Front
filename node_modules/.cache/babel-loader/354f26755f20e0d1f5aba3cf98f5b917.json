{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:/Projects/Mod_App_Front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from './getInitColorSchemeScript';\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && mode === 'system') {\n    var mql = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (mql.matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  }\n\n  return undefined;\n}\n\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n\n  return undefined;\n}\n\nexport function getColorScheme(state) {\n  return processState(state, function (mode) {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n\n    return undefined;\n  });\n}\n\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  var value;\n\n  try {\n    value = localStorage.getItem(key) || undefined;\n\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch (e) {// Unsupported\n  }\n\n  return value || defaultValue;\n}\n\nexport default function useCurrentColorScheme(options) {\n  var _options$defaultMode = options.defaultMode,\n      defaultMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n      defaultLightColorScheme = options.defaultLightColorScheme,\n      defaultDarkColorScheme = options.defaultDarkColorScheme,\n      _options$supportedCol = options.supportedColorSchemes,\n      supportedColorSchemes = _options$supportedCol === void 0 ? [] : _options$supportedCol,\n      _options$modeStorageK = options.modeStorageKey,\n      modeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n      _options$colorSchemeS = options.colorSchemeStorageKey,\n      colorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n      _options$storageWindo = options.storageWindow,\n      storageWindow = _options$storageWindo === void 0 ? typeof window === 'undefined' ? undefined : window : _options$storageWindo;\n  var joinedColorSchemes = supportedColorSchemes.join(',');\n\n  var _React$useState = React.useState(function () {\n    var initialMode = initializeValue(modeStorageKey, defaultMode);\n    var lightColorScheme = initializeValue(\"\".concat(colorSchemeStorageKey, \"-light\"), defaultLightColorScheme);\n    var darkColorScheme = initializeValue(\"\".concat(colorSchemeStorageKey, \"-dark\"), defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme: lightColorScheme,\n      darkColorScheme: darkColorScheme\n    };\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var colorScheme = getColorScheme(state);\n  var setMode = React.useCallback(function (mode) {\n    setState(function (currentState) {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n\n      var newMode = mode != null ? mode : defaultMode;\n\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch (e) {// Unsupported\n      }\n\n      return _extends({}, currentState, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  var setColorScheme = React.useCallback(function (value) {\n    if (!value) {\n      setState(function (currentState) {\n        try {\n          localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-light\"), defaultLightColorScheme);\n          localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-dark\"), defaultDarkColorScheme);\n        } catch (e) {// Unsupported\n        }\n\n        return _extends({}, currentState, {\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        });\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(\"`\".concat(value, \"` does not exist in `theme.colorSchemes`.\"));\n      } else {\n        setState(function (currentState) {\n          var newState = _extends({}, currentState);\n\n          processState(currentState, function (mode) {\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-\").concat(mode), value);\n            } catch (e) {// Unsupported\n            }\n\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(function (currentState) {\n        var newState = _extends({}, currentState);\n\n        var newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        var newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(\"`\".concat(newLightColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-light\"), newLightColorScheme);\n            } catch (error) {// Unsupported\n            }\n          }\n        }\n\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(\"`\".concat(newDarkColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-dark\"), newDarkColorScheme);\n            } catch (error) {// Unsupported\n            }\n          }\n        }\n\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  var handleMediaQuery = React.useCallback(function (event) {\n    if (state.mode === 'system') {\n      setState(function (currentState) {\n        var systemMode = event != null && event.matches ? 'dark' : 'light'; // Early exit, nothing changed.\n\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n\n        return _extends({}, currentState, {\n          systemMode: systemMode\n        });\n      });\n    }\n  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep\n\n  var mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(function () {\n    var handler = function handler() {\n      return mediaListener.current.apply(mediaListener, arguments);\n    }; // Always listen to System preference\n\n\n    var media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers\n\n    media.addListener(handler);\n    handler(media);\n    return function () {\n      media.removeListener(handler);\n    };\n  }, []); // Handle when localStorage has changed\n\n  React.useEffect(function () {\n    if (storageWindow) {\n      var handleStorage = function handleStorage(event) {\n        var value = event.newValue;\n\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      }; // For syncing color-scheme changes between iframes\n\n\n      storageWindow.addEventListener('storage', handleStorage);\n      return function () {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);\n  return _extends({}, state, {\n    colorScheme: colorScheme,\n    setMode: setMode,\n    setColorScheme: setColorScheme\n  });\n}","map":{"version":3,"sources":["C:/Projects/Mod_App_Front/node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js"],"names":["_extends","React","DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","getSystemMode","mode","window","mql","matchMedia","matches","undefined","processState","state","callback","systemMode","getColorScheme","lightColorScheme","darkColorScheme","initializeValue","key","defaultValue","value","localStorage","getItem","setItem","e","useCurrentColorScheme","options","defaultMode","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","modeStorageKey","colorSchemeStorageKey","storageWindow","joinedColorSchemes","join","useState","initialMode","setState","colorScheme","setMode","useCallback","currentState","newMode","setColorScheme","includes","console","error","newState","newLightColorScheme","light","newDarkColorScheme","dark","handleMediaQuery","event","mediaListener","useRef","current","useEffect","handler","media","addListener","removeListener","handleStorage","newValue","startsWith","match","endsWith","addEventListener","removeEventListener"],"mappings":"AAAA;;;AAEA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,wBAAT,EAAmCC,gCAAnC,QAA2E,4BAA3E;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCD,IAAI,KAAK,QAA9C,EAAwD;AACtD,QAAME,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,8BAAlB,CAAZ;;AACA,QAAID,GAAG,CAACE,OAAR,EAAiB;AACf,aAAO,MAAP;AACD;;AACD,WAAO,OAAP;AACD;;AACD,SAAOC,SAAP;AACD;;AACD,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AACrC,MAAID,KAAK,CAACP,IAAN,KAAe,OAAf,IAA0BO,KAAK,CAACP,IAAN,KAAe,QAAf,IAA2BO,KAAK,CAACE,UAAN,KAAqB,OAA9E,EAAuF;AACrF,WAAOD,QAAQ,CAAC,OAAD,CAAf;AACD;;AACD,MAAID,KAAK,CAACP,IAAN,KAAe,MAAf,IAAyBO,KAAK,CAACP,IAAN,KAAe,QAAf,IAA2BO,KAAK,CAACE,UAAN,KAAqB,MAA7E,EAAqF;AACnF,WAAOD,QAAQ,CAAC,MAAD,CAAf;AACD;;AACD,SAAOH,SAAP;AACD;;AACD,OAAO,SAASK,cAAT,CAAwBH,KAAxB,EAA+B;AACpC,SAAOD,YAAY,CAACC,KAAD,EAAQ,UAAAP,IAAI,EAAI;AACjC,QAAIA,IAAI,KAAK,OAAb,EAAsB;AACpB,aAAOO,KAAK,CAACI,gBAAb;AACD;;AACD,QAAIX,IAAI,KAAK,MAAb,EAAqB;AACnB,aAAOO,KAAK,CAACK,eAAb;AACD;;AACD,WAAOP,SAAP;AACD,GARkB,CAAnB;AASD;;AACD,SAASQ,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AAC1C,MAAI,OAAOd,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOI,SAAP;AACD;;AACD,MAAIW,KAAJ;;AACA,MAAI;AACFA,IAAAA,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,GAArB,KAA6BT,SAArC;;AACA,QAAI,CAACW,KAAL,EAAY;AACV;AACAC,MAAAA,YAAY,CAACE,OAAb,CAAqBL,GAArB,EAA0BC,YAA1B;AACD;AACF,GAND,CAME,OAAOK,CAAP,EAAU,CACV;AACD;;AACD,SAAOJ,KAAK,IAAID,YAAhB;AACD;;AACD,eAAe,SAASM,qBAAT,CAA+BC,OAA/B,EAAwC;AACrD,6BAQIA,OARJ,CACEC,WADF;AAAA,MACEA,WADF,qCACgB,OADhB;AAAA,MAEEC,uBAFF,GAQIF,OARJ,CAEEE,uBAFF;AAAA,MAGEC,sBAHF,GAQIH,OARJ,CAGEG,sBAHF;AAAA,8BAQIH,OARJ,CAIEI,qBAJF;AAAA,MAIEA,qBAJF,sCAI0B,EAJ1B;AAAA,8BAQIJ,OARJ,CAKEK,cALF;AAAA,MAKEA,cALF,sCAKmB9B,wBALnB;AAAA,8BAQIyB,OARJ,CAMEM,qBANF;AAAA,MAMEA,qBANF,sCAM0B9B,gCAN1B;AAAA,8BAQIwB,OARJ,CAOEO,aAPF;AAAA,MAOEA,aAPF,sCAOkB,OAAO5B,MAAP,KAAkB,WAAlB,GAAgCI,SAAhC,GAA4CJ,MAP9D;AASA,MAAM6B,kBAAkB,GAAGJ,qBAAqB,CAACK,IAAtB,CAA2B,GAA3B,CAA3B;;AACA,wBAA0BnC,KAAK,CAACoC,QAAN,CAAe,YAAM;AAC7C,QAAMC,WAAW,GAAGpB,eAAe,CAACc,cAAD,EAAiBJ,WAAjB,CAAnC;AACA,QAAMZ,gBAAgB,GAAGE,eAAe,WAAIe,qBAAJ,aAAmCJ,uBAAnC,CAAxC;AACA,QAAMZ,eAAe,GAAGC,eAAe,WAAIe,qBAAJ,YAAkCH,sBAAlC,CAAvC;AACA,WAAO;AACLzB,MAAAA,IAAI,EAAEiC,WADD;AAELxB,MAAAA,UAAU,EAAEV,aAAa,CAACkC,WAAD,CAFpB;AAGLtB,MAAAA,gBAAgB,EAAhBA,gBAHK;AAILC,MAAAA,eAAe,EAAfA;AAJK,KAAP;AAMD,GAVyB,CAA1B;AAAA;AAAA,MAAOL,KAAP;AAAA,MAAc2B,QAAd;;AAWA,MAAMC,WAAW,GAAGzB,cAAc,CAACH,KAAD,CAAlC;AACA,MAAM6B,OAAO,GAAGxC,KAAK,CAACyC,WAAN,CAAkB,UAAArC,IAAI,EAAI;AACxCkC,IAAAA,QAAQ,CAAC,UAAAI,YAAY,EAAI;AACvB,UAAItC,IAAI,KAAKsC,YAAY,CAACtC,IAA1B,EAAgC;AAC9B;AACA,eAAOsC,YAAP;AACD;;AACD,UAAMC,OAAO,GAAGvC,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsBuB,WAAtC;;AACA,UAAI;AACFN,QAAAA,YAAY,CAACE,OAAb,CAAqBQ,cAArB,EAAqCY,OAArC;AACD,OAFD,CAEE,OAAOnB,CAAP,EAAU,CACV;AACD;;AACD,aAAOzB,QAAQ,CAAC,EAAD,EAAK2C,YAAL,EAAmB;AAChCtC,QAAAA,IAAI,EAAEuC,OAD0B;AAEhC9B,QAAAA,UAAU,EAAEV,aAAa,CAACwC,OAAD;AAFO,OAAnB,CAAf;AAID,KAfO,CAAR;AAgBD,GAjBe,EAiBb,CAACZ,cAAD,EAAiBJ,WAAjB,CAjBa,CAAhB;AAkBA,MAAMiB,cAAc,GAAG5C,KAAK,CAACyC,WAAN,CAAkB,UAAArB,KAAK,EAAI;AAChD,QAAI,CAACA,KAAL,EAAY;AACVkB,MAAAA,QAAQ,CAAC,UAAAI,YAAY,EAAI;AACvB,YAAI;AACFrB,UAAAA,YAAY,CAACE,OAAb,WAAwBS,qBAAxB,aAAuDJ,uBAAvD;AACAP,UAAAA,YAAY,CAACE,OAAb,WAAwBS,qBAAxB,YAAsDH,sBAAtD;AACD,SAHD,CAGE,OAAOL,CAAP,EAAU,CACV;AACD;;AACD,eAAOzB,QAAQ,CAAC,EAAD,EAAK2C,YAAL,EAAmB;AAChC3B,UAAAA,gBAAgB,EAAEa,uBADc;AAEhCZ,UAAAA,eAAe,EAAEa;AAFe,SAAnB,CAAf;AAID,OAXO,CAAR;AAYD,KAbD,MAaO,IAAI,OAAOT,KAAP,KAAiB,QAArB,EAA+B;AACpC,UAAIA,KAAK,IAAI,CAACc,kBAAkB,CAACW,QAAnB,CAA4BzB,KAA5B,CAAd,EAAkD;AAChD0B,QAAAA,OAAO,CAACC,KAAR,YAAmB3B,KAAnB;AACD,OAFD,MAEO;AACLkB,QAAAA,QAAQ,CAAC,UAAAI,YAAY,EAAI;AACvB,cAAMM,QAAQ,GAAGjD,QAAQ,CAAC,EAAD,EAAK2C,YAAL,CAAzB;;AACAhC,UAAAA,YAAY,CAACgC,YAAD,EAAe,UAAAtC,IAAI,EAAI;AACjC,gBAAI;AACFiB,cAAAA,YAAY,CAACE,OAAb,WAAwBS,qBAAxB,cAAiD5B,IAAjD,GAAyDgB,KAAzD;AACD,aAFD,CAEE,OAAOI,CAAP,EAAU,CACV;AACD;;AACD,gBAAIpB,IAAI,KAAK,OAAb,EAAsB;AACpB4C,cAAAA,QAAQ,CAACjC,gBAAT,GAA4BK,KAA5B;AACD;;AACD,gBAAIhB,IAAI,KAAK,MAAb,EAAqB;AACnB4C,cAAAA,QAAQ,CAAChC,eAAT,GAA2BI,KAA3B;AACD;AACF,WAZW,CAAZ;AAaA,iBAAO4B,QAAP;AACD,SAhBO,CAAR;AAiBD;AACF,KAtBM,MAsBA;AACLV,MAAAA,QAAQ,CAAC,UAAAI,YAAY,EAAI;AACvB,YAAMM,QAAQ,GAAGjD,QAAQ,CAAC,EAAD,EAAK2C,YAAL,CAAzB;;AACA,YAAMO,mBAAmB,GAAG7B,KAAK,CAAC8B,KAAN,KAAgB,IAAhB,GAAuBtB,uBAAvB,GAAiDR,KAAK,CAAC8B,KAAnF;AACA,YAAMC,kBAAkB,GAAG/B,KAAK,CAACgC,IAAN,KAAe,IAAf,GAAsBvB,sBAAtB,GAA+CT,KAAK,CAACgC,IAAhF;;AACA,YAAIH,mBAAJ,EAAyB;AACvB,cAAI,CAACf,kBAAkB,CAACW,QAAnB,CAA4BI,mBAA5B,CAAL,EAAuD;AACrDH,YAAAA,OAAO,CAACC,KAAR,YAAmBE,mBAAnB;AACD,WAFD,MAEO;AACLD,YAAAA,QAAQ,CAACjC,gBAAT,GAA4BkC,mBAA5B;;AACA,gBAAI;AACF5B,cAAAA,YAAY,CAACE,OAAb,WAAwBS,qBAAxB,aAAuDiB,mBAAvD;AACD,aAFD,CAEE,OAAOF,KAAP,EAAc,CACd;AACD;AACF;AACF;;AACD,YAAII,kBAAJ,EAAwB;AACtB,cAAI,CAACjB,kBAAkB,CAACW,QAAnB,CAA4BM,kBAA5B,CAAL,EAAsD;AACpDL,YAAAA,OAAO,CAACC,KAAR,YAAmBI,kBAAnB;AACD,WAFD,MAEO;AACLH,YAAAA,QAAQ,CAAChC,eAAT,GAA2BmC,kBAA3B;;AACA,gBAAI;AACF9B,cAAAA,YAAY,CAACE,OAAb,WAAwBS,qBAAxB,YAAsDmB,kBAAtD;AACD,aAFD,CAEE,OAAOJ,KAAP,EAAc,CACd;AACD;AACF;AACF;;AACD,eAAOC,QAAP;AACD,OA7BO,CAAR;AA8BD;AACF,GApEsB,EAoEpB,CAACd,kBAAD,EAAqBF,qBAArB,EAA4CJ,uBAA5C,EAAqEC,sBAArE,CApEoB,CAAvB;AAqEA,MAAMwB,gBAAgB,GAAGrD,KAAK,CAACyC,WAAN,CAAkB,UAAAa,KAAK,EAAI;AAClD,QAAI3C,KAAK,CAACP,IAAN,KAAe,QAAnB,EAA6B;AAC3BkC,MAAAA,QAAQ,CAAC,UAAAI,YAAY,EAAI;AACvB,YAAM7B,UAAU,GAAGyC,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAAC9C,OAAvB,GAAiC,MAAjC,GAA0C,OAA7D,CADuB,CAGvB;;AACA,YAAIkC,YAAY,CAAC7B,UAAb,KAA4BA,UAAhC,EAA4C;AAC1C,iBAAO6B,YAAP;AACD;;AACD,eAAO3C,QAAQ,CAAC,EAAD,EAAK2C,YAAL,EAAmB;AAChC7B,UAAAA,UAAU,EAAVA;AADgC,SAAnB,CAAf;AAGD,OAVO,CAAR;AAWD;AACF,GAdwB,EActB,CAACF,KAAK,CAACP,IAAP,CAdsB,CAAzB,CA9GqD,CA8HrD;;AACA,MAAMmD,aAAa,GAAGvD,KAAK,CAACwD,MAAN,CAAaH,gBAAb,CAAtB;AACAE,EAAAA,aAAa,CAACE,OAAd,GAAwBJ,gBAAxB;AACArD,EAAAA,KAAK,CAAC0D,SAAN,CAAgB,YAAM;AACpB,QAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,aAAaJ,aAAa,CAACE,OAAd,OAAAF,aAAa,YAA1B;AAAA,KAAhB,CADoB,CAGpB;;;AACA,QAAMK,KAAK,GAAGvD,MAAM,CAACE,UAAP,CAAkB,8BAAlB,CAAd,CAJoB,CAMpB;;AACAqD,IAAAA,KAAK,CAACC,WAAN,CAAkBF,OAAlB;AACAA,IAAAA,OAAO,CAACC,KAAD,CAAP;AACA,WAAO,YAAM;AACXA,MAAAA,KAAK,CAACE,cAAN,CAAqBH,OAArB;AACD,KAFD;AAGD,GAZD,EAYG,EAZH,EAjIqD,CA+IrD;;AACA3D,EAAAA,KAAK,CAAC0D,SAAN,CAAgB,YAAM;AACpB,QAAIzB,aAAJ,EAAmB;AACjB,UAAM8B,aAAa,GAAG,SAAhBA,aAAgB,CAAAT,KAAK,EAAI;AAC7B,YAAMlC,KAAK,GAAGkC,KAAK,CAACU,QAApB;;AACA,YAAI,OAAOV,KAAK,CAACpC,GAAb,KAAqB,QAArB,IAAiCoC,KAAK,CAACpC,GAAN,CAAU+C,UAAV,CAAqBjC,qBAArB,CAAjC,KAAiF,CAACZ,KAAD,IAAUc,kBAAkB,CAACgC,KAAnB,CAAyB9C,KAAzB,CAA3F,CAAJ,EAAiI;AAC/H;AACA,cAAIkC,KAAK,CAACpC,GAAN,CAAUiD,QAAV,CAAmB,OAAnB,CAAJ,EAAiC;AAC/BvB,YAAAA,cAAc,CAAC;AACbM,cAAAA,KAAK,EAAE9B;AADM,aAAD,CAAd;AAGD;;AACD,cAAIkC,KAAK,CAACpC,GAAN,CAAUiD,QAAV,CAAmB,MAAnB,CAAJ,EAAgC;AAC9BvB,YAAAA,cAAc,CAAC;AACbQ,cAAAA,IAAI,EAAEhC;AADO,aAAD,CAAd;AAGD;AACF;;AACD,YAAIkC,KAAK,CAACpC,GAAN,KAAca,cAAd,KAAiC,CAACX,KAAD,IAAU,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4ByB,QAA5B,CAAqCzB,KAArC,CAA3C,CAAJ,EAA6F;AAC3FoB,UAAAA,OAAO,CAACpB,KAAK,IAAIO,WAAV,CAAP;AACD;AACF,OAlBD,CADiB,CAoBjB;;;AACAM,MAAAA,aAAa,CAACmC,gBAAd,CAA+B,SAA/B,EAA0CL,aAA1C;AACA,aAAO,YAAM;AACX9B,QAAAA,aAAa,CAACoC,mBAAd,CAAkC,SAAlC,EAA6CN,aAA7C;AACD,OAFD;AAGD;;AACD,WAAOtD,SAAP;AACD,GA5BD,EA4BG,CAACmC,cAAD,EAAiBJ,OAAjB,EAA0BT,cAA1B,EAA0CC,qBAA1C,EAAiEE,kBAAjE,EAAqFP,WAArF,EAAkGM,aAAlG,CA5BH;AA6BA,SAAOlC,QAAQ,CAAC,EAAD,EAAKY,KAAL,EAAY;AACzB4B,IAAAA,WAAW,EAAXA,WADyB;AAEzBC,IAAAA,OAAO,EAAPA,OAFyB;AAGzBI,IAAAA,cAAc,EAAdA;AAHyB,GAAZ,CAAf;AAKD","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from './getInitColorSchemeScript';\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  let value;\n  try {\n    value = localStorage.getItem(key) || undefined;\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch (e) {\n    // Unsupported\n  }\n  return value || defaultValue;\n}\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      const newMode = mode != null ? mode : defaultMode;\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch (e) {\n        // Unsupported\n      }\n      return _extends({}, currentState, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n        } catch (e) {\n          // Unsupported\n        }\n        return _extends({}, currentState, {\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        });\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = _extends({}, currentState);\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n            } catch (e) {\n              // Unsupported\n            }\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = _extends({}, currentState);\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event != null && event.matches ? 'dark' : 'light';\n\n        // Early exit, nothing changed.\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n        return _extends({}, currentState, {\n          systemMode\n        });\n      });\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    const handler = (...args) => mediaListener.current(...args);\n\n    // Always listen to System preference\n    const media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, []);\n\n  // Handle when localStorage has changed\n  React.useEffect(() => {\n    if (storageWindow) {\n      const handleStorage = event => {\n        const value = event.newValue;\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      };\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);\n  return _extends({}, state, {\n    colorScheme,\n    setMode,\n    setColorScheme\n  });\n}"]},"metadata":{},"sourceType":"module"}