{"ast":null,"code":"'use client';\n\nimport _classCallCheck from \"C:/Projects/Mod_App_Front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Projects/Mod_App_Front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport useLazyRef from '../useLazyRef/useLazyRef';\nimport useOnMount from '../useOnMount/useOnMount';\nexport var Timeout = /*#__PURE__*/function () {\n  function Timeout() {\n    var _this = this;\n\n    _classCallCheck(this, Timeout);\n\n    this.currentId = null;\n\n    this.clear = function () {\n      if (_this.currentId !== null) {\n        clearTimeout(_this.currentId);\n        _this.currentId = null;\n      }\n    };\n\n    this.disposeEffect = function () {\n      return _this.clear;\n    };\n  }\n\n  _createClass(Timeout, [{\n    key: \"start\",\n    value:\n    /**\n     * Executes `fn` after `delay`, clearing any previously scheduled call.\n     */\n    function start(delay, fn) {\n      var _this2 = this;\n\n      this.clear();\n      this.currentId = setTimeout(function () {\n        _this2.currentId = null;\n        fn();\n      }, delay);\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      return new Timeout();\n    }\n  }]);\n\n  return Timeout;\n}();\nexport default function useTimeout() {\n  var timeout = useLazyRef(Timeout.create).current;\n  useOnMount(timeout.disposeEffect);\n  return timeout;\n}","map":{"version":3,"sources":["C:/Projects/Mod_App_Front/node_modules/@mui/utils/useTimeout/useTimeout.js"],"names":["useLazyRef","useOnMount","Timeout","currentId","clear","clearTimeout","disposeEffect","delay","fn","setTimeout","useTimeout","timeout","create","current"],"mappings":"AAAA;;;;AAEA,OAAOA,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,WAAaC,OAAb;AACE,qBAAc;AAAA;;AAAA;;AACZ,SAAKC,SAAL,GAAiB,IAAjB;;AACA,SAAKC,KAAL,GAAa,YAAM;AACjB,UAAI,KAAI,CAACD,SAAL,KAAmB,IAAvB,EAA6B;AAC3BE,QAAAA,YAAY,CAAC,KAAI,CAACF,SAAN,CAAZ;AACA,QAAA,KAAI,CAACA,SAAL,GAAiB,IAAjB;AACD;AACF,KALD;;AAMA,SAAKG,aAAL,GAAqB,YAAM;AACzB,aAAO,KAAI,CAACF,KAAZ;AACD,KAFD;AAGD;;AAZH;AAAA;AAAA;AAgBE;AACF;AACA;AACE,mBAAMG,KAAN,EAAaC,EAAb,EAAiB;AAAA;;AACf,WAAKJ,KAAL;AACA,WAAKD,SAAL,GAAiBM,UAAU,CAAC,YAAM;AAChC,QAAA,MAAI,CAACN,SAAL,GAAiB,IAAjB;AACAK,QAAAA,EAAE;AACH,OAH0B,EAGxBD,KAHwB,CAA3B;AAID;AAzBH;AAAA;AAAA,WAaE,kBAAgB;AACd,aAAO,IAAIL,OAAJ,EAAP;AACD;AAfH;;AAAA;AAAA;AA2BA,eAAe,SAASQ,UAAT,GAAsB;AACnC,MAAMC,OAAO,GAAGX,UAAU,CAACE,OAAO,CAACU,MAAT,CAAV,CAA2BC,OAA3C;AACAZ,EAAAA,UAAU,CAACU,OAAO,CAACL,aAAT,CAAV;AACA,SAAOK,OAAP;AACD","sourcesContent":["'use client';\n\nimport useLazyRef from '../useLazyRef/useLazyRef';\nimport useOnMount from '../useOnMount/useOnMount';\nexport class Timeout {\n  constructor() {\n    this.currentId = null;\n    this.clear = () => {\n      if (this.currentId !== null) {\n        clearTimeout(this.currentId);\n        this.currentId = null;\n      }\n    };\n    this.disposeEffect = () => {\n      return this.clear;\n    };\n  }\n  static create() {\n    return new Timeout();\n  }\n  /**\n   * Executes `fn` after `delay`, clearing any previously scheduled call.\n   */\n  start(delay, fn) {\n    this.clear();\n    this.currentId = setTimeout(() => {\n      this.currentId = null;\n      fn();\n    }, delay);\n  }\n}\nexport default function useTimeout() {\n  const timeout = useLazyRef(Timeout.create).current;\n  useOnMount(timeout.disposeEffect);\n  return timeout;\n}"]},"metadata":{},"sourceType":"module"}