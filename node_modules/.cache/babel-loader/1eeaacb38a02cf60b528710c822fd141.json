{"ast":null,"code":"import _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport clamp from '@mui/utils/clamp';\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\nfunction clampWrapper(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"MUI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return clamp(value, min, max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  var re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map(function (n, index) {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: Unsupported `\".concat(color, \"` color.\\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().\") : _formatMuiErrorMessage(9, color));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1);\n  var colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: unsupported `\".concat(colorSpace, \"` color space.\\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.\") : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values,\n    colorSpace: colorSpace\n  };\n}\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\n\nexport var colorChannel = function colorChannel(color) {\n  var decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map(function (val, idx) {\n    return decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? \"\".concat(val, \"%\") : val;\n  }).join(' ');\n};\nexport var private_safeColorChannel = function private_safeColorChannel(color, warning) {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n};\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  var type = color.type,\n      colorSpace = color.colorSpace;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = \"\".concat(colorSpace, \" \").concat(values.join(' '));\n  } else {\n    values = \"\".concat(values.join(', '));\n  }\n\n  return \"\".concat(type, \"(\").concat(values, \")\");\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n, i) {\n    return intToHex(i === 3 ? Math.round(255 * n) : n);\n  }).join(''));\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clampWrapper(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = \"/\".concat(value);\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\nexport function private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\nexport function private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (var _i = 0; _i < 3; _i += 1) {\n      color.values[_i] += (1 - color.values[_i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\nexport function private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nexport function private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return emphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Blend a transparent overlay color with a background color, resulting in a single\n * RGB color.\n * @param {string} background - CSS color\n * @param {string} overlay - CSS color\n * @param {number} opacity - Opacity multiplier in the range 0 - 1\n * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.\n */\n\nexport function blend(background, overlay, opacity) {\n  var gamma = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.0;\n\n  var blendChannel = function blendChannel(b, o) {\n    return Math.round(Math.pow(Math.pow(b, 1 / gamma) * (1 - opacity) + Math.pow(o, 1 / gamma) * opacity, gamma));\n  };\n\n  var backgroundColor = decomposeColor(background);\n  var overlayColor = decomposeColor(overlay);\n  var rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];\n  return recomposeColor({\n    type: 'rgb',\n    values: rgb\n  });\n}","map":{"version":3,"sources":["C:/Projects/Mod_App_Front/node_modules/@mui/system/esm/colorManipulator.js"],"names":["_formatMuiErrorMessage","clamp","clampWrapper","value","min","max","process","env","NODE_ENV","console","error","hexToRgb","color","slice","re","RegExp","length","colors","match","map","n","index","parseInt","Math","round","join","intToHex","int","hex","toString","decomposeColor","type","charAt","marker","indexOf","substring","Error","values","colorSpace","split","shift","parseFloat","colorChannel","decomposedColor","val","idx","private_safeColorChannel","warning","warn","recomposeColor","i","rgbToHex","hslToRgb","h","s","l","a","f","k","rgb","push","getLuminance","Number","toFixed","getContrastRatio","foreground","background","lumA","lumB","alpha","private_safeAlpha","darken","coefficient","private_safeDarken","lighten","private_safeLighten","emphasize","private_safeEmphasize","blend","overlay","opacity","gamma","blendChannel","b","o","backgroundColor","overlayColor"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,kCAAnC;AACA;;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA+C;AAAA,MAAlBC,GAAkB,uEAAZ,CAAY;AAAA,MAATC,GAAS,uEAAH,CAAG;;AAC7C,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAIL,KAAK,GAAGC,GAAR,IAAeD,KAAK,GAAGE,GAA3B,EAAgC;AAC9BI,MAAAA,OAAO,CAACC,KAAR,mCAAyCP,KAAzC,+BAAmEC,GAAnE,eAA2EC,GAA3E;AACD;AACF;;AACD,SAAOJ,KAAK,CAACE,KAAD,EAAQC,GAAR,EAAaC,GAAb,CAAZ;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASM,QAAT,CAAkBC,KAAlB,EAAyB;AAC9BA,EAAAA,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAR;AACA,MAAMC,EAAE,GAAG,IAAIC,MAAJ,eAAkBH,KAAK,CAACI,MAAN,IAAgB,CAAhB,GAAoB,CAApB,GAAwB,CAA1C,QAAgD,GAAhD,CAAX;AACA,MAAIC,MAAM,GAAGL,KAAK,CAACM,KAAN,CAAYJ,EAAZ,CAAb;;AACA,MAAIG,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAN,CAAUD,MAAV,KAAqB,CAAnC,EAAsC;AACpCC,IAAAA,MAAM,GAAGA,MAAM,CAACE,GAAP,CAAW,UAAAC,CAAC;AAAA,aAAIA,CAAC,GAAGA,CAAR;AAAA,KAAZ,CAAT;AACD;;AACD,SAAOH,MAAM,gBAASA,MAAM,CAACD,MAAP,KAAkB,CAAlB,GAAsB,GAAtB,GAA4B,EAArC,cAA2CC,MAAM,CAACE,GAAP,CAAW,UAACC,CAAD,EAAIC,KAAJ,EAAc;AAC/E,WAAOA,KAAK,GAAG,CAAR,GAAYC,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAApB,GAA8BG,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAAR,GAAkB,GAAlB,GAAwB,IAAnC,IAA2C,IAAhF;AACD,GAFuD,EAErDK,IAFqD,CAEhD,IAFgD,CAA3C,SAEM,EAFnB;AAGD;;AACD,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,MAAMC,GAAG,GAAGD,GAAG,CAACE,QAAJ,CAAa,EAAb,CAAZ;AACA,SAAOD,GAAG,CAACZ,MAAJ,KAAe,CAAf,cAAuBY,GAAvB,IAA+BA,GAAtC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASE,cAAT,CAAwBlB,KAAxB,EAA+B;AACpC;AACA,MAAIA,KAAK,CAACmB,IAAV,EAAgB;AACd,WAAOnB,KAAP;AACD;;AACD,MAAIA,KAAK,CAACoB,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;AAC3B,WAAOF,cAAc,CAACnB,QAAQ,CAACC,KAAD,CAAT,CAArB;AACD;;AACD,MAAMqB,MAAM,GAAGrB,KAAK,CAACsB,OAAN,CAAc,GAAd,CAAf;AACA,MAAMH,IAAI,GAAGnB,KAAK,CAACuB,SAAN,CAAgB,CAAhB,EAAmBF,MAAnB,CAAb;;AACA,MAAI,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,MAAvB,EAA+B,OAA/B,EAAwCC,OAAxC,CAAgDH,IAAhD,MAA0D,CAAC,CAA/D,EAAkE;AAChE,UAAM,IAAIK,KAAJ,CAAU9B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,+BAA8DI,KAA9D,4GAC0EZ,sBAAsB,CAAC,CAAD,EAAIY,KAAJ,CAD1G,CAAN;AAED;;AACD,MAAIyB,MAAM,GAAGzB,KAAK,CAACuB,SAAN,CAAgBF,MAAM,GAAG,CAAzB,EAA4BrB,KAAK,CAACI,MAAN,GAAe,CAA3C,CAAb;AACA,MAAIsB,UAAJ;;AACA,MAAIP,IAAI,KAAK,OAAb,EAAsB;AACpBM,IAAAA,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,CAAT;AACAD,IAAAA,UAAU,GAAGD,MAAM,CAACG,KAAP,EAAb;;AACA,QAAIH,MAAM,CAACrB,MAAP,KAAkB,CAAlB,IAAuBqB,MAAM,CAAC,CAAD,CAAN,CAAUL,MAAV,CAAiB,CAAjB,MAAwB,GAAnD,EAAwD;AACtDK,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,CAAUxB,KAAV,CAAgB,CAAhB,CAAZ;AACD;;AACD,QAAI,CAAC,MAAD,EAAS,YAAT,EAAuB,SAAvB,EAAkC,cAAlC,EAAkD,UAAlD,EAA8DqB,OAA9D,CAAsEI,UAAtE,MAAsF,CAAC,CAA3F,EAA8F;AAC5F,YAAM,IAAIF,KAAJ,CAAU9B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,+BAA8D8B,UAA9D,oHAC0EtC,sBAAsB,CAAC,EAAD,EAAKsC,UAAL,CAD1G,CAAN;AAED;AACF,GAVD,MAUO;AACLD,IAAAA,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAa,GAAb,CAAT;AACD;;AACDF,EAAAA,MAAM,GAAGA,MAAM,CAAClB,GAAP,CAAW,UAAAhB,KAAK;AAAA,WAAIsC,UAAU,CAACtC,KAAD,CAAd;AAAA,GAAhB,CAAT;AACA,SAAO;AACL4B,IAAAA,IAAI,EAAJA,IADK;AAELM,IAAAA,MAAM,EAANA,MAFK;AAGLC,IAAAA,UAAU,EAAVA;AAHK,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAAA9B,KAAK,EAAI;AACnC,MAAM+B,eAAe,GAAGb,cAAc,CAAClB,KAAD,CAAtC;AACA,SAAO+B,eAAe,CAACN,MAAhB,CAAuBxB,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmCM,GAAnC,CAAuC,UAACyB,GAAD,EAAMC,GAAN;AAAA,WAAcF,eAAe,CAACZ,IAAhB,CAAqBG,OAArB,CAA6B,KAA7B,MAAwC,CAAC,CAAzC,IAA8CW,GAAG,KAAK,CAAtD,aAA6DD,GAA7D,SAAsEA,GAApF;AAAA,GAAvC,EAAgInB,IAAhI,CAAqI,GAArI,CAAP;AACD,CAHM;AAIP,OAAO,IAAMqB,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAClC,KAAD,EAAQmC,OAAR,EAAoB;AAC1D,MAAI;AACF,WAAOL,YAAY,CAAC9B,KAAD,CAAnB;AACD,GAFD,CAEE,OAAOF,KAAP,EAAc;AACd,QAAIqC,OAAO,IAAIzC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAxC,EAAsD;AACpDC,MAAAA,OAAO,CAACuC,IAAR,CAAaD,OAAb;AACD;;AACD,WAAOnC,KAAP;AACD;AACF,CATM;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASqC,cAAT,CAAwBrC,KAAxB,EAA+B;AACpC,MACEmB,IADF,GAGInB,KAHJ,CACEmB,IADF;AAAA,MAEEO,UAFF,GAGI1B,KAHJ,CAEE0B,UAFF;AAIA,MACED,MADF,GAEIzB,KAFJ,CACEyB,MADF;;AAGA,MAAIN,IAAI,CAACG,OAAL,CAAa,KAAb,MAAwB,CAAC,CAA7B,EAAgC;AAC9B;AACAG,IAAAA,MAAM,GAAGA,MAAM,CAAClB,GAAP,CAAW,UAACC,CAAD,EAAI8B,CAAJ;AAAA,aAAUA,CAAC,GAAG,CAAJ,GAAQ5B,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAAhB,GAA0BA,CAApC;AAAA,KAAX,CAAT;AACD,GAHD,MAGO,IAAIW,IAAI,CAACG,OAAL,CAAa,KAAb,MAAwB,CAAC,CAA7B,EAAgC;AACrCG,IAAAA,MAAM,CAAC,CAAD,CAAN,aAAeA,MAAM,CAAC,CAAD,CAArB;AACAA,IAAAA,MAAM,CAAC,CAAD,CAAN,aAAeA,MAAM,CAAC,CAAD,CAArB;AACD;;AACD,MAAIN,IAAI,CAACG,OAAL,CAAa,OAAb,MAA0B,CAAC,CAA/B,EAAkC;AAChCG,IAAAA,MAAM,aAAMC,UAAN,cAAoBD,MAAM,CAACZ,IAAP,CAAY,GAAZ,CAApB,CAAN;AACD,GAFD,MAEO;AACLY,IAAAA,MAAM,aAAMA,MAAM,CAACZ,IAAP,CAAY,IAAZ,CAAN,CAAN;AACD;;AACD,mBAAUM,IAAV,cAAkBM,MAAlB;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,QAAT,CAAkBvC,KAAlB,EAAyB;AAC9B;AACA,MAAIA,KAAK,CAACsB,OAAN,CAAc,GAAd,MAAuB,CAA3B,EAA8B;AAC5B,WAAOtB,KAAP;AACD;;AACD,wBAEIkB,cAAc,CAAClB,KAAD,CAFlB;AAAA,MACEyB,MADF,mBACEA,MADF;;AAGA,oBAAWA,MAAM,CAAClB,GAAP,CAAW,UAACC,CAAD,EAAI8B,CAAJ;AAAA,WAAUxB,QAAQ,CAACwB,CAAC,KAAK,CAAN,GAAU3B,IAAI,CAACC,KAAL,CAAW,MAAMJ,CAAjB,CAAV,GAAgCA,CAAjC,CAAlB;AAAA,GAAX,EAAkEK,IAAlE,CAAuE,EAAvE,CAAX;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2B,QAAT,CAAkBxC,KAAlB,EAAyB;AAC9BA,EAAAA,KAAK,GAAGkB,cAAc,CAAClB,KAAD,CAAtB;AACA,eAEIA,KAFJ;AAAA,MACEyB,MADF,UACEA,MADF;AAGA,MAAMgB,CAAC,GAAGhB,MAAM,CAAC,CAAD,CAAhB;AACA,MAAMiB,CAAC,GAAGjB,MAAM,CAAC,CAAD,CAAN,GAAY,GAAtB;AACA,MAAMkB,CAAC,GAAGlB,MAAM,CAAC,CAAD,CAAN,GAAY,GAAtB;AACA,MAAMmB,CAAC,GAAGF,CAAC,GAAG/B,IAAI,CAACnB,GAAL,CAASmD,CAAT,EAAY,IAAIA,CAAhB,CAAd;;AACA,MAAME,CAAC,GAAG,SAAJA,CAAI,CAACrC,CAAD;AAAA,QAAIsC,CAAJ,uEAAQ,CAACtC,CAAC,GAAGiC,CAAC,GAAG,EAAT,IAAe,EAAvB;AAAA,WAA8BE,CAAC,GAAGC,CAAC,GAAGjC,IAAI,CAAClB,GAAL,CAASkB,IAAI,CAACnB,GAAL,CAASsD,CAAC,GAAG,CAAb,EAAgB,IAAIA,CAApB,EAAuB,CAAvB,CAAT,EAAoC,CAAC,CAArC,CAAtC;AAAA,GAAV;;AACA,MAAI3B,IAAI,GAAG,KAAX;AACA,MAAM4B,GAAG,GAAG,CAACpC,IAAI,CAACC,KAAL,CAAWiC,CAAC,CAAC,CAAD,CAAD,GAAO,GAAlB,CAAD,EAAyBlC,IAAI,CAACC,KAAL,CAAWiC,CAAC,CAAC,CAAD,CAAD,GAAO,GAAlB,CAAzB,EAAiDlC,IAAI,CAACC,KAAL,CAAWiC,CAAC,CAAC,CAAD,CAAD,GAAO,GAAlB,CAAjD,CAAZ;;AACA,MAAI7C,KAAK,CAACmB,IAAN,KAAe,MAAnB,EAA2B;AACzBA,IAAAA,IAAI,IAAI,GAAR;AACA4B,IAAAA,GAAG,CAACC,IAAJ,CAASvB,MAAM,CAAC,CAAD,CAAf;AACD;;AACD,SAAOY,cAAc,CAAC;AACpBlB,IAAAA,IAAI,EAAJA,IADoB;AAEpBM,IAAAA,MAAM,EAAEsB;AAFY,GAAD,CAArB;AAID;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,YAAT,CAAsBjD,KAAtB,EAA6B;AAClCA,EAAAA,KAAK,GAAGkB,cAAc,CAAClB,KAAD,CAAtB;AACA,MAAI+C,GAAG,GAAG/C,KAAK,CAACmB,IAAN,KAAe,KAAf,IAAwBnB,KAAK,CAACmB,IAAN,KAAe,MAAvC,GAAgDD,cAAc,CAACsB,QAAQ,CAACxC,KAAD,CAAT,CAAd,CAAgCyB,MAAhF,GAAyFzB,KAAK,CAACyB,MAAzG;AACAsB,EAAAA,GAAG,GAAGA,GAAG,CAACxC,GAAJ,CAAQ,UAAAyB,GAAG,EAAI;AACnB,QAAIhC,KAAK,CAACmB,IAAN,KAAe,OAAnB,EAA4B;AAC1Ba,MAAAA,GAAG,IAAI,GAAP,CAD0B,CACd;AACb;;AACD,WAAOA,GAAG,IAAI,OAAP,GAAiBA,GAAG,GAAG,KAAvB,YAAgC,CAACA,GAAG,GAAG,KAAP,IAAgB,KAAhD,EAA0D,GAA1D,CAAP;AACD,GALK,CAAN,CAHkC,CAUlC;;AACA,SAAOkB,MAAM,CAAC,CAAC,SAASH,GAAG,CAAC,CAAD,CAAZ,GAAkB,SAASA,GAAG,CAAC,CAAD,CAA9B,GAAoC,SAASA,GAAG,CAAC,CAAD,CAAjD,EAAsDI,OAAtD,CAA8D,CAA9D,CAAD,CAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,UAA1B,EAAsCC,UAAtC,EAAkD;AACvD,MAAMC,IAAI,GAAGN,YAAY,CAACI,UAAD,CAAzB;AACA,MAAMG,IAAI,GAAGP,YAAY,CAACK,UAAD,CAAzB;AACA,SAAO,CAAC3C,IAAI,CAAClB,GAAL,CAAS8D,IAAT,EAAeC,IAAf,IAAuB,IAAxB,KAAiC7C,IAAI,CAACnB,GAAL,CAAS+D,IAAT,EAAeC,IAAf,IAAuB,IAAxD,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,CAAezD,KAAf,EAAsBT,KAAtB,EAA6B;AAClCS,EAAAA,KAAK,GAAGkB,cAAc,CAAClB,KAAD,CAAtB;AACAT,EAAAA,KAAK,GAAGD,YAAY,CAACC,KAAD,CAApB;;AACA,MAAIS,KAAK,CAACmB,IAAN,KAAe,KAAf,IAAwBnB,KAAK,CAACmB,IAAN,KAAe,KAA3C,EAAkD;AAChDnB,IAAAA,KAAK,CAACmB,IAAN,IAAc,GAAd;AACD;;AACD,MAAInB,KAAK,CAACmB,IAAN,KAAe,OAAnB,EAA4B;AAC1BnB,IAAAA,KAAK,CAACyB,MAAN,CAAa,CAAb,eAAsBlC,KAAtB;AACD,GAFD,MAEO;AACLS,IAAAA,KAAK,CAACyB,MAAN,CAAa,CAAb,IAAkBlC,KAAlB;AACD;;AACD,SAAO8C,cAAc,CAACrC,KAAD,CAArB;AACD;AACD,OAAO,SAAS0D,iBAAT,CAA2B1D,KAA3B,EAAkCT,KAAlC,EAAyC4C,OAAzC,EAAkD;AACvD,MAAI;AACF,WAAOsB,KAAK,CAACzD,KAAD,EAAQT,KAAR,CAAZ;AACD,GAFD,CAEE,OAAOO,KAAP,EAAc;AACd,QAAIqC,OAAO,IAAIzC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAxC,EAAsD;AACpDC,MAAAA,OAAO,CAACuC,IAAR,CAAaD,OAAb;AACD;;AACD,WAAOnC,KAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2D,MAAT,CAAgB3D,KAAhB,EAAuB4D,WAAvB,EAAoC;AACzC5D,EAAAA,KAAK,GAAGkB,cAAc,CAAClB,KAAD,CAAtB;AACA4D,EAAAA,WAAW,GAAGtE,YAAY,CAACsE,WAAD,CAA1B;;AACA,MAAI5D,KAAK,CAACmB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAAnC,EAAsC;AACpCtB,IAAAA,KAAK,CAACyB,MAAN,CAAa,CAAb,KAAmB,IAAImC,WAAvB;AACD,GAFD,MAEO,IAAI5D,KAAK,CAACmB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAA/B,IAAoCtB,KAAK,CAACmB,IAAN,CAAWG,OAAX,CAAmB,OAAnB,MAAgC,CAAC,CAAzE,EAA4E;AACjF,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7BtC,MAAAA,KAAK,CAACyB,MAAN,CAAaa,CAAb,KAAmB,IAAIsB,WAAvB;AACD;AACF;;AACD,SAAOvB,cAAc,CAACrC,KAAD,CAArB;AACD;AACD,OAAO,SAAS6D,kBAAT,CAA4B7D,KAA5B,EAAmC4D,WAAnC,EAAgDzB,OAAhD,EAAyD;AAC9D,MAAI;AACF,WAAOwB,MAAM,CAAC3D,KAAD,EAAQ4D,WAAR,CAAb;AACD,GAFD,CAEE,OAAO9D,KAAP,EAAc;AACd,QAAIqC,OAAO,IAAIzC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAxC,EAAsD;AACpDC,MAAAA,OAAO,CAACuC,IAAR,CAAaD,OAAb;AACD;;AACD,WAAOnC,KAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8D,OAAT,CAAiB9D,KAAjB,EAAwB4D,WAAxB,EAAqC;AAC1C5D,EAAAA,KAAK,GAAGkB,cAAc,CAAClB,KAAD,CAAtB;AACA4D,EAAAA,WAAW,GAAGtE,YAAY,CAACsE,WAAD,CAA1B;;AACA,MAAI5D,KAAK,CAACmB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAAnC,EAAsC;AACpCtB,IAAAA,KAAK,CAACyB,MAAN,CAAa,CAAb,KAAmB,CAAC,MAAMzB,KAAK,CAACyB,MAAN,CAAa,CAAb,CAAP,IAA0BmC,WAA7C;AACD,GAFD,MAEO,IAAI5D,KAAK,CAACmB,IAAN,CAAWG,OAAX,CAAmB,KAAnB,MAA8B,CAAC,CAAnC,EAAsC;AAC3C,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7BtC,MAAAA,KAAK,CAACyB,MAAN,CAAaa,CAAb,KAAmB,CAAC,MAAMtC,KAAK,CAACyB,MAAN,CAAaa,CAAb,CAAP,IAA0BsB,WAA7C;AACD;AACF,GAJM,MAIA,IAAI5D,KAAK,CAACmB,IAAN,CAAWG,OAAX,CAAmB,OAAnB,MAAgC,CAAC,CAArC,EAAwC;AAC7C,SAAK,IAAIgB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG,CAApB,EAAuBA,EAAC,IAAI,CAA5B,EAA+B;AAC7BtC,MAAAA,KAAK,CAACyB,MAAN,CAAaa,EAAb,KAAmB,CAAC,IAAItC,KAAK,CAACyB,MAAN,CAAaa,EAAb,CAAL,IAAwBsB,WAA3C;AACD;AACF;;AACD,SAAOvB,cAAc,CAACrC,KAAD,CAArB;AACD;AACD,OAAO,SAAS+D,mBAAT,CAA6B/D,KAA7B,EAAoC4D,WAApC,EAAiDzB,OAAjD,EAA0D;AAC/D,MAAI;AACF,WAAO2B,OAAO,CAAC9D,KAAD,EAAQ4D,WAAR,CAAd;AACD,GAFD,CAEE,OAAO9D,KAAP,EAAc;AACd,QAAIqC,OAAO,IAAIzC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAxC,EAAsD;AACpDC,MAAAA,OAAO,CAACuC,IAAR,CAAaD,OAAb;AACD;;AACD,WAAOnC,KAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgE,SAAT,CAAmBhE,KAAnB,EAA8C;AAAA,MAApB4D,WAAoB,uEAAN,IAAM;AACnD,SAAOX,YAAY,CAACjD,KAAD,CAAZ,GAAsB,GAAtB,GAA4B2D,MAAM,CAAC3D,KAAD,EAAQ4D,WAAR,CAAlC,GAAyDE,OAAO,CAAC9D,KAAD,EAAQ4D,WAAR,CAAvE;AACD;AACD,OAAO,SAASK,qBAAT,CAA+BjE,KAA/B,EAAsC4D,WAAtC,EAAmDzB,OAAnD,EAA4D;AACjE,MAAI;AACF,WAAO6B,SAAS,CAAChE,KAAD,EAAQ4D,WAAR,CAAhB;AACD,GAFD,CAEE,OAAO9D,KAAP,EAAc;AACd,QAAIqC,OAAO,IAAIzC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAxC,EAAsD;AACpDC,MAAAA,OAAO,CAACuC,IAAR,CAAaD,OAAb;AACD;;AACD,WAAOnC,KAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkE,KAAT,CAAeZ,UAAf,EAA2Ba,OAA3B,EAAoCC,OAApC,EAA0D;AAAA,MAAbC,KAAa,uEAAL,GAAK;;AAC/D,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAIC,CAAJ;AAAA,WAAU7D,IAAI,CAACC,KAAL,UAAY,SAAA2D,CAAC,EAAK,IAAIF,KAAT,CAAD,IAAoB,IAAID,OAAxB,IAAmC,SAAAI,CAAC,EAAK,IAAIH,KAAT,CAAD,GAAmBD,OAAlE,EAA8EC,KAA9E,EAAV;AAAA,GAArB;;AACA,MAAMI,eAAe,GAAGvD,cAAc,CAACoC,UAAD,CAAtC;AACA,MAAMoB,YAAY,GAAGxD,cAAc,CAACiD,OAAD,CAAnC;AACA,MAAMpB,GAAG,GAAG,CAACuB,YAAY,CAACG,eAAe,CAAChD,MAAhB,CAAuB,CAAvB,CAAD,EAA4BiD,YAAY,CAACjD,MAAb,CAAoB,CAApB,CAA5B,CAAb,EAAkE6C,YAAY,CAACG,eAAe,CAAChD,MAAhB,CAAuB,CAAvB,CAAD,EAA4BiD,YAAY,CAACjD,MAAb,CAAoB,CAApB,CAA5B,CAA9E,EAAmI6C,YAAY,CAACG,eAAe,CAAChD,MAAhB,CAAuB,CAAvB,CAAD,EAA4BiD,YAAY,CAACjD,MAAb,CAAoB,CAApB,CAA5B,CAA/I,CAAZ;AACA,SAAOY,cAAc,CAAC;AACpBlB,IAAAA,IAAI,EAAE,KADc;AAEpBM,IAAAA,MAAM,EAAEsB;AAFY,GAAD,CAArB;AAID","sourcesContent":["import _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport clamp from '@mui/utils/clamp';\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clampWrapper(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return clamp(value, min, max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexport const private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clampWrapper(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nexport function private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nexport function private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return emphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Blend a transparent overlay color with a background color, resulting in a single\n * RGB color.\n * @param {string} background - CSS color\n * @param {string} overlay - CSS color\n * @param {number} opacity - Opacity multiplier in the range 0 - 1\n * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.\n */\nexport function blend(background, overlay, opacity, gamma = 1.0) {\n  const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);\n  const backgroundColor = decomposeColor(background);\n  const overlayColor = decomposeColor(overlay);\n  const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];\n  return recomposeColor({\n    type: 'rgb',\n    values: rgb\n  });\n}"]},"metadata":{},"sourceType":"module"}