[{"C:\\Projects\\Mod_App_Front\\src\\index.js":"1","C:\\Projects\\Mod_App_Front\\src\\App.js":"2","C:\\Projects\\Mod_App_Front\\src\\reportWebVitals.js":"3","C:\\Projects\\Mod_App_Front\\src\\components\\login.js":"4","C:\\Projects\\Mod_App_Front\\src\\components\\register.js":"5","C:\\Projects\\Mod_App_Front\\src\\components\\profile.js":"6","C:\\Projects\\Mod_App_Front\\src\\components\\firebase.js":"7","C:\\Projects\\Mod_App_Front\\src\\components\\signInWIthGoogle.js":"8","C:\\Projects\\Mod_App_Front\\src\\components\\YouTubeComments.js":"9","C:\\Projects\\Mod_App_Front\\src\\components\\TestComponent.js":"10","C:\\Projects\\Mod_App_Front\\src\\components\\MenuComponent.js":"11","C:\\Projects\\Mod_App_Front\\src\\components\\SignInWithGoogle.js":"12"},{"size":230,"mtime":1716257062120,"results":"13","hashOfConfig":"14"},{"size":1569,"mtime":1717258826718,"results":"15","hashOfConfig":"14"},{"size":375,"mtime":1716249948809,"results":"16","hashOfConfig":"14"},{"size":2434,"mtime":1717261083018,"results":"17","hashOfConfig":"14"},{"size":3040,"mtime":1716515634807,"results":"18","hashOfConfig":"14"},{"size":3694,"mtime":1717258826725,"results":"19","hashOfConfig":"14"},{"size":1210,"mtime":1716600272001,"results":"20","hashOfConfig":"14"},{"size":1895,"mtime":1717260314071,"results":"21","hashOfConfig":"14"},{"size":5335,"mtime":1717258636333,"results":"22","hashOfConfig":"14"},{"size":151,"mtime":1716257271798,"results":"23","hashOfConfig":"14"},{"size":2811,"mtime":1717258826721,"results":"24","hashOfConfig":"14"},{"size":1834,"mtime":1717261072529,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"go97qp",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\Mod_App_Front\\src\\index.js",[],[],[],"C:\\Projects\\Mod_App_Front\\src\\App.js",[],[],"C:\\Projects\\Mod_App_Front\\src\\reportWebVitals.js",[],[],"C:\\Projects\\Mod_App_Front\\src\\components\\login.js",[],[],"C:\\Projects\\Mod_App_Front\\src\\components\\register.js",[],[],"C:\\Projects\\Mod_App_Front\\src\\components\\profile.js",[],[],"C:\\Projects\\Mod_App_Front\\src\\components\\firebase.js",[],[],"C:\\Projects\\Mod_App_Front\\src\\components\\signInWIthGoogle.js",[],[],"C:\\Projects\\Mod_App_Front\\src\\components\\YouTubeComments.js",["65"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TextField, Button, Select, MenuItem, InputLabel, FormControl, Typography, Container, Paper, List, ListItem, ListItemText, CircularProgress } from \"@mui/material\";\r\nimport \"./YouTubeComments.css\";\r\n\r\nconst YouTubeComments = () => {\r\n  const [videoId, setVideoId] = useState(\"\");\r\n  const [commentAuthors, setCommentAuthors] = useState([]);\r\n  const [accessToken, setAccessToken] = useState(\"\");\r\n  const [maxResults, setMaxResults] = useState(10);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const token = urlParams.get(\"access_token\");\r\n    const videoIdParam = urlParams.get(\"videoId\");\r\n    const maxResultsParam = urlParams.get(\"maxResults\");\r\n\r\n    if (token) {\r\n      setAccessToken(token);\r\n      if (videoIdParam) setVideoId(videoIdParam);\r\n      if (maxResultsParam) setMaxResults(Number(maxResultsParam));\r\n      fetchComments(token, videoIdParam, maxResultsParam);\r\n    }\r\n  }, []);\r\n\r\n  const extractVideoId = (input) => {\r\n    try {\r\n      const urlObj = new URL(input);\r\n      const params = new URLSearchParams(urlObj.search);\r\n      if (params.has(\"v\")) {\r\n        return params.get(\"v\");\r\n      }\r\n      const pathname = urlObj.pathname;\r\n      if (pathname.startsWith(\"/embed/\")) {\r\n        return pathname.split(\"/embed/\")[1];\r\n      }\r\n      if (pathname.startsWith(\"/v/\")) {\r\n        return pathname.split(\"/v/\")[1];\r\n      }\r\n      if (pathname.startsWith(\"/watch\")) {\r\n        return params.get(\"v\");\r\n      }\r\n      return input;\r\n    } catch (e) {\r\n      return input;\r\n    }\r\n  };\r\n\r\n  const handleAuth = async (videoId, maxResults) => {\r\n    const state = btoa(JSON.stringify({ videoId, maxResults }));\r\n    window.location.href = `https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/auth/google?state=${state}`;\r\n  };\r\n\r\n  const fetchComments = async (token, videoId, maxResults) => {\r\n    setError(null);\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await axios.post(\"https://youtube-comments-backend-23opjzqi7q-uc.a.run.app/youtube/comments\", {\r\n        videoId: videoId || extractVideoId(videoId),\r\n        accessToken: token || accessToken,\r\n        maxResults,\r\n      });\r\n      const commentThreads = response.data;\r\n      const authors = commentThreads.flatMap(thread => [\r\n        thread.snippet.topLevelComment.snippet.authorDisplayName,\r\n        ...(thread.replies ? thread.replies.comments.map(reply => reply.snippet.authorDisplayName) : [])\r\n      ]);\r\n      setCommentAuthors(authors);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching comment threads\", error);\r\n      if (error.response && error.response.status === 401) {\r\n        setError(\"Session expired. Please re-authenticate.\");\r\n        handleAuth(videoId, maxResults);\r\n      } else if (error.response && error.response.status === 404) {\r\n        setError(\"Video not found\");\r\n      } else {\r\n        setError(\"Failed to fetch comments. Please try again.\");\r\n      }\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFetchComments = async () => {\r\n    if (!accessToken) {\r\n      await handleAuth(videoId, maxResults);\r\n    } else {\r\n      await fetchComments(accessToken, videoId, maxResults);\r\n    }\r\n  };\r\n\r\n  const selectWinner = () => {\r\n    if (commentAuthors.length === 0) return;\r\n    const winner = commentAuthors[Math.floor(Math.random() * commentAuthors.length)];\r\n    alert(`The winner is: ${winner}`);\r\n  };\r\n\r\n  return (\r\n    <Container component={Paper} elevation={3} sx={{ padding: 4, marginTop: 4 }}>\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        YouTube Comment Picker\r\n      </Typography>\r\n      <TextField\r\n        fullWidth\r\n        label=\"YouTube Video URL or ID\"\r\n        variant=\"outlined\"\r\n        value={videoId}\r\n        onChange={(e) => setVideoId(e.target.value)}\r\n        margin=\"normal\"\r\n      />\r\n      <FormControl fullWidth variant=\"outlined\" margin=\"normal\">\r\n        <InputLabel>Max Results</InputLabel>\r\n        <Select value={maxResults} onChange={(e) => setMaxResults(Number(e.target.value))} label=\"Max Results\">\r\n          <MenuItem value={10}>10</MenuItem>\r\n          <MenuItem value={15}>15</MenuItem>\r\n          <MenuItem value={25}>25</MenuItem>\r\n          <MenuItem value={50}>50</MenuItem>\r\n          <MenuItem value={100}>100</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleFetchComments} disabled={loading}>\r\n        Fetch Comments\r\n      </Button>\r\n      {loading && <CircularProgress sx={{ marginTop: 2 }} />}\r\n      {error && <Typography color=\"error\" sx={{ marginTop: 2 }}>{error}</Typography>}\r\n      <List sx={{ marginTop: 2, maxHeight: 400, overflow: 'auto' }}>\r\n        {commentAuthors.map((author, index) => (\r\n          <ListItem key={index}>\r\n            <ListItemText primary={author} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      {commentAuthors.length > 0 && (\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={selectWinner} sx={{ marginTop: 2 }}>\r\n          Select Winner\r\n        </Button>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default YouTubeComments;\r\n","C:\\Projects\\Mod_App_Front\\src\\components\\TestComponent.js",[],[],[],"C:\\Projects\\Mod_App_Front\\src\\components\\MenuComponent.js",[],[],"C:\\Projects\\Mod_App_Front\\src\\components\\SignInWithGoogle.js",[],[],{"ruleId":"66","severity":1,"message":"67","line":26,"column":6,"nodeType":"68","endLine":26,"endColumn":8,"suggestions":"69"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchComments'. Either include it or remove the dependency array.","ArrayExpression",["70"],{"desc":"71","fix":"72"},"Update the dependencies array to be: [fetchComments]",{"range":"73","text":"74"},[1125,1127],"[fetchComments]"]